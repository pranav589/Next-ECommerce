[{"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\BoxShadowWrapper.js":"1","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CardInput\\index.js":"2","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CartProduct\\index.js":"3","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CartSummary\\index.js":"4","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CategoryCard\\CategoryCard.js":"5","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CouponCode\\CouponCode.js":"6","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CreateProduct\\CreateProduct.js":"7","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CustomInputBox\\CustomInputBox.js":"8","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CustomTabs\\CustomTabs.js":"9","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\DatePickerComponent\\DatePickerComponent.js":"10","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Demo.js":"11","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\DetailOrder\\DetailOrder.js":"12","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Dropdown\\Dropdown.js":"13","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\HeroBanner\\HeroBanner.js":"14","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\HomeCategoryCard\\HomeCategoryCard.js":"15","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\IncrementDecrementCounter\\IncrementDecrementCounter.js":"16","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Layout.js":"17","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\LineChart\\LineChart.js":"18","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Modal\\CustomModal.js":"19","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Navbar\\Navbar.js":"20","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\PaginationComponent\\PaginationComponent.js":"21","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\PaymentComp\\index.js":"22","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\ProductCard\\ProductsCard.js":"23","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\SearchProductList\\SearchProductList.js":"24","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\TableComponent\\TableComponent.js":"25","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Wrapper\\Wrapper.js":"26","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\config\\createEmotionCache.js":"27","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\config\\theme.js":"28","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\addressModel.js":"29","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\cartModel.js":"30","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\categoryModel.js":"31","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\couponModel.js":"32","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\orderModel.js":"33","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\productModel.js":"34","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\userModel.js":"35","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\categories\\index.js":"36","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\coupon\\index.js":"37","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\index.js":"38","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\orders\\index.js":"39","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\products\\create.js":"40","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\products\\edit\\[id].js":"41","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\products\\index.js":"42","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\users\\index.js":"43","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\address\\index.js":"44","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\auth\\login.js":"45","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\auth\\register.js":"46","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\auth\\verify.js":"47","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\cart\\guest\\[id].js":"48","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\cart\\index.js":"49","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\cart\\[id].js":"50","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\category\\index.js":"51","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\category\\products\\[id].js":"52","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\category\\[id].js":"53","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\checkout_sessions.js":"54","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\applyCoupon\\index.js":"55","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\index.js":"56","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\removeCoupon\\index.js":"57","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\[id].js":"58","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\dashboard\\index.js":"59","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\hello.js":"60","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\delivery.js":"61","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\index.js":"62","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\payment.js":"63","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\[id].js":"64","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\pay.js":"65","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\payment.js":"66","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\product\\banner\\index.js":"67","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\product\\index.js":"68","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\product\\[id].js":"69","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\salesData\\index.js":"70","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\search\\[id].js":"71","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\user\\index.js":"72","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\user\\resetPassword.js":"73","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\user\\[id].js":"74","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\webhook.js":"75","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\cancel.js":"76","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\cart.js":"77","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\categories\\index.js":"78","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\categories\\[id].js":"79","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\checkout\\[id].js":"80","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\index.js":"81","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\login.js":"82","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\order\\[id].js":"83","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\payment.js":"84","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\product\\[id].js":"85","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\profile.js":"86","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\register.js":"87","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\search\\[id].js":"88","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\success.js":"89","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\_app.js":"90","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\_document.js":"91","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\apiCall.js":"92","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\connectDB.js":"93","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\get-stripejs.js":"94","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\imageUpload.js":"95","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\valid.js":"96"},{"size":496,"mtime":1681891056481,"results":"97","hashOfConfig":"98"},{"size":899,"mtime":1682694759278,"results":"99","hashOfConfig":"98"},{"size":8019,"mtime":1683013051337,"results":"100","hashOfConfig":"98"},{"size":2838,"mtime":1682944636311,"results":"101","hashOfConfig":"98"},{"size":2137,"mtime":1683010017871,"results":"102","hashOfConfig":"98"},{"size":1600,"mtime":1683010366408,"results":"103","hashOfConfig":"98"},{"size":17014,"mtime":1683013236689,"results":"104","hashOfConfig":"98"},{"size":916,"mtime":1683010294170,"results":"105","hashOfConfig":"98"},{"size":2261,"mtime":1683013252877,"results":"106","hashOfConfig":"98"},{"size":1513,"mtime":1683013463417,"results":"107","hashOfConfig":"98"},{"size":1909,"mtime":1681896817814,"results":"108","hashOfConfig":"98"},{"size":9807,"mtime":1682947551159,"results":"109","hashOfConfig":"98"},{"size":1554,"mtime":1682582376558,"results":"110","hashOfConfig":"98"},{"size":4105,"mtime":1683013282995,"results":"111","hashOfConfig":"98"},{"size":1417,"mtime":1683013103860,"results":"112","hashOfConfig":"98"},{"size":1371,"mtime":1682240507774,"results":"113","hashOfConfig":"98"},{"size":409,"mtime":1682328927335,"results":"114","hashOfConfig":"98"},{"size":2957,"mtime":1682933166401,"results":"115","hashOfConfig":"98"},{"size":2926,"mtime":1683010110562,"results":"116","hashOfConfig":"98"},{"size":10910,"mtime":1682937249964,"results":"117","hashOfConfig":"98"},{"size":638,"mtime":1682663082682,"results":"118","hashOfConfig":"98"},{"size":5268,"mtime":1683104346775,"results":"119","hashOfConfig":"98"},{"size":6404,"mtime":1682924559834,"results":"120","hashOfConfig":"98"},{"size":981,"mtime":1682605389893,"results":"121","hashOfConfig":"98"},{"size":5430,"mtime":1683013318694,"results":"122","hashOfConfig":"98"},{"size":355,"mtime":1681985239712,"results":"123","hashOfConfig":"98"},{"size":148,"mtime":1679727349097,"results":"124","hashOfConfig":"98"},{"size":421,"mtime":1679736864687,"results":"125","hashOfConfig":"98"},{"size":710,"mtime":1681213445143,"results":"126","hashOfConfig":"98"},{"size":804,"mtime":1682947043929,"results":"127","hashOfConfig":"98"},{"size":398,"mtime":1682321155692,"results":"128","hashOfConfig":"98"},{"size":584,"mtime":1682929592173,"results":"129","hashOfConfig":"98"},{"size":1127,"mtime":1682947053694,"results":"130","hashOfConfig":"98"},{"size":1103,"mtime":1682667487531,"results":"131","hashOfConfig":"98"},{"size":742,"mtime":1679740040715,"results":"132","hashOfConfig":"98"},{"size":10832,"mtime":1683013148082,"results":"133","hashOfConfig":"98"},{"size":9654,"mtime":1682943200870,"results":"134","hashOfConfig":"98"},{"size":8367,"mtime":1683013128917,"results":"135","hashOfConfig":"98"},{"size":4109,"mtime":1682663452849,"results":"136","hashOfConfig":"98"},{"size":204,"mtime":1682334797741,"results":"137","hashOfConfig":"98"},{"size":203,"mtime":1682339212382,"results":"138","hashOfConfig":"98"},{"size":6800,"mtime":1683010029310,"results":"139","hashOfConfig":"98"},{"size":8774,"mtime":1683010046440,"results":"140","hashOfConfig":"98"},{"size":2377,"mtime":1682589232369,"results":"141","hashOfConfig":"98"},{"size":1404,"mtime":1680518567571,"results":"142","hashOfConfig":"98"},{"size":1465,"mtime":1680519056920,"results":"143","hashOfConfig":"98"},{"size":1328,"mtime":1680861487117,"results":"144","hashOfConfig":"98"},{"size":3557,"mtime":1682774393129,"results":"145","hashOfConfig":"98"},{"size":1694,"mtime":1682942380865,"results":"146","hashOfConfig":"98"},{"size":5223,"mtime":1682942522069,"results":"147","hashOfConfig":"98"},{"size":1729,"mtime":1682663827304,"results":"148","hashOfConfig":"98"},{"size":1727,"mtime":1682667018774,"results":"149","hashOfConfig":"98"},{"size":1769,"mtime":1682324595517,"results":"150","hashOfConfig":"98"},{"size":1951,"mtime":1683105620403,"results":"151","hashOfConfig":"98"},{"size":2101,"mtime":1682948021090,"results":"152","hashOfConfig":"98"},{"size":1874,"mtime":1682930848424,"results":"153","hashOfConfig":"98"},{"size":1908,"mtime":1682948245305,"results":"154","hashOfConfig":"98"},{"size":2291,"mtime":1682936841253,"results":"155","hashOfConfig":"98"},{"size":1607,"mtime":1682582896919,"results":"156","hashOfConfig":"98"},{"size":170,"mtime":1679726196014,"results":"157","hashOfConfig":"98"},{"size":1068,"mtime":1682233428499,"results":"158","hashOfConfig":"98"},{"size":2482,"mtime":1682947415649,"results":"159","hashOfConfig":"98"},{"size":1159,"mtime":1682691790000,"results":"160","hashOfConfig":"98"},{"size":899,"mtime":1681900166746,"results":"161","hashOfConfig":"98"},{"size":2423,"mtime":1683105625221,"results":"162","hashOfConfig":"98"},{"size":1437,"mtime":1683105628633,"results":"163","hashOfConfig":"98"},{"size":707,"mtime":1682669905087,"results":"164","hashOfConfig":"98"},{"size":2216,"mtime":1682667568446,"results":"165","hashOfConfig":"98"},{"size":2949,"mtime":1682667584555,"results":"166","hashOfConfig":"98"},{"size":2323,"mtime":1682925633285,"results":"167","hashOfConfig":"98"},{"size":1575,"mtime":1682662597500,"results":"168","hashOfConfig":"98"},{"size":1612,"mtime":1682663305841,"results":"169","hashOfConfig":"98"},{"size":1588,"mtime":1681810140428,"results":"170","hashOfConfig":"98"},{"size":1752,"mtime":1681984043755,"results":"171","hashOfConfig":"98"},{"size":3101,"mtime":1683105632159,"results":"172","hashOfConfig":"98"},{"size":109,"mtime":1681388696469,"results":"173","hashOfConfig":"98"},{"size":8093,"mtime":1683013332091,"results":"174","hashOfConfig":"98"},{"size":2692,"mtime":1682922716619,"results":"175","hashOfConfig":"98"},{"size":2532,"mtime":1682922787836,"results":"176","hashOfConfig":"98"},{"size":9665,"mtime":1682947346454,"results":"177","hashOfConfig":"98"},{"size":7657,"mtime":1683013347676,"results":"178","hashOfConfig":"98"},{"size":6841,"mtime":1682242753182,"results":"179","hashOfConfig":"98"},{"size":606,"mtime":1681716462295,"results":"180","hashOfConfig":"98"},{"size":550,"mtime":1683106205845,"results":"181","hashOfConfig":"98"},{"size":7739,"mtime":1683013401277,"results":"182","hashOfConfig":"98"},{"size":11111,"mtime":1682775934718,"results":"183","hashOfConfig":"98"},{"size":6533,"mtime":1681799735849,"results":"184","hashOfConfig":"98"},{"size":2056,"mtime":1682667184237,"results":"185","hashOfConfig":"98"},{"size":1326,"mtime":1682697509350,"results":"186","hashOfConfig":"98"},{"size":1033,"mtime":1679741061956,"results":"187","hashOfConfig":"98"},{"size":378,"mtime":1681301942141,"results":"188","hashOfConfig":"98"},{"size":346,"mtime":1683019423220,"results":"189","hashOfConfig":"98"},{"size":454,"mtime":1679740518857,"results":"190","hashOfConfig":"98"},{"size":268,"mtime":1683105639691,"results":"191","hashOfConfig":"98"},{"size":667,"mtime":1682582425744,"results":"192","hashOfConfig":"98"},{"size":677,"mtime":1679740206538,"results":"193","hashOfConfig":"98"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dvz5st",{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","suppressedMessages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","suppressedMessages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267"},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311"},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323"},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","suppressedMessages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","suppressedMessages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","suppressedMessages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341"},{"filePath":"342","messages":"343","suppressedMessages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345"},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349"},{"filePath":"350","messages":"351","suppressedMessages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353"},{"filePath":"354","messages":"355","suppressedMessages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361"},{"filePath":"362","messages":"363","suppressedMessages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365"},{"filePath":"366","messages":"367","suppressedMessages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369"},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373"},{"filePath":"374","messages":"375","suppressedMessages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377"},{"filePath":"378","messages":"379","suppressedMessages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","suppressedMessages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384"},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388"},{"filePath":"389","messages":"390","suppressedMessages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392"},{"filePath":"393","messages":"394","suppressedMessages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","suppressedMessages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400"},{"filePath":"401","messages":"402","suppressedMessages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","suppressedMessages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407"},{"filePath":"408","messages":"409","suppressedMessages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411"},{"filePath":"412","messages":"413","suppressedMessages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","suppressedMessages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419"},{"filePath":"420","messages":"421","suppressedMessages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","suppressedMessages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426"},{"filePath":"427","messages":"428","suppressedMessages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430"},{"filePath":"431","messages":"432","suppressedMessages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434"},{"filePath":"435","messages":"436","suppressedMessages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438"},{"filePath":"439","messages":"440","suppressedMessages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442"},{"filePath":"443","messages":"444","suppressedMessages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446"},{"filePath":"447","messages":"448","suppressedMessages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450"},{"filePath":"451","messages":"452","suppressedMessages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454"},{"filePath":"455","messages":"456","suppressedMessages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"458"},{"filePath":"459","messages":"460","suppressedMessages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","suppressedMessages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","suppressedMessages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468"},{"filePath":"469","messages":"470","suppressedMessages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472"},{"filePath":"473","messages":"474","suppressedMessages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476"},{"filePath":"477","messages":"478","suppressedMessages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480"},{"filePath":"481","messages":"482","suppressedMessages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484"},{"filePath":"485","messages":"486","suppressedMessages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488"},{"filePath":"489","messages":"490","suppressedMessages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","suppressedMessages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","suppressedMessages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498"},{"filePath":"499","messages":"500","suppressedMessages":"501","errorCount":12,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502"},{"filePath":"503","messages":"504","suppressedMessages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506"},{"filePath":"507","messages":"508","suppressedMessages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510"},{"filePath":"511","messages":"512","suppressedMessages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","suppressedMessages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","suppressedMessages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","suppressedMessages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","suppressedMessages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","suppressedMessages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","suppressedMessages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"532","messages":"533","suppressedMessages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\BoxShadowWrapper.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CardInput\\index.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CartProduct\\index.js",["535"],[],"import { Box, Button, CircularProgress, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport IncrementDecrementCounter from \"../IncrementDecrementCounter/IncrementDecrementCounter\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { toast } from \"react-toastify\";\r\nimport { addToCart, decrease, deleteItem, increase } from \"../../store/Actions\";\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\n\r\nfunction CartProduct({\r\n  product,\r\n  setTriggerLoginCart,\r\n  triggerLoginCart,\r\n  setTriggerGuestCart,\r\n  triggerGuestCart,\r\n}) {\r\n  const [isDeleteLoading, setIsDeleteLoading] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { cart, auth } = state;\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const cartId =\r\n    typeof window !== \"undefined\" && localStorage.getItem(\"cartId\");\r\n  const handleDelete = async () => {\r\n    setIsDeleteLoading(true);\r\n    try {\r\n      if (token && auth?.isVerified) {\r\n        const data = {\r\n          productId: product?.productId?._id,\r\n        };\r\n        const res = await apiCall(\r\n          \"DELETE\",\r\n          `cart/${auth?.user.id}`,\r\n          token,\r\n          data\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          toast.success(\"Item deleted from the cart.\");\r\n          setTriggerLoginCart(!triggerLoginCart);\r\n        }\r\n      } else {\r\n        const data = {\r\n          productId: product?.productId?._id,\r\n          cartId: cartId,\r\n        };\r\n        if (cartId !== null) {\r\n          const res = await apiCall(\r\n            \"DELETE\",\r\n            `cart/guest/${cartId}`,\r\n            token,\r\n            data\r\n          );\r\n          if (res?.data?.status === \"success\") {\r\n            toast.success(\"Item deleted from the cart.\");\r\n            setTriggerGuestCart(!triggerGuestCart);\r\n          }\r\n        }\r\n      }\r\n\r\n      setIsDeleteLoading(false);\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsDeleteLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDecrease = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      if (token && auth?.isVerified) {\r\n        const data = [\r\n          {\r\n            productId: product?.productId?._id,\r\n            quantity: 1,\r\n          },\r\n        ];\r\n\r\n        const res = await apiCall(\r\n          \"PATCH\",\r\n          `cart/${auth?.user?.id}`,\r\n          token,\r\n          data\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          toast.success(\"success\");\r\n          setTriggerLoginCart(!triggerLoginCart);\r\n        }\r\n      } else {\r\n        const data = {\r\n          products: [\r\n            {\r\n              productId: product?.productId?._id,\r\n              quantity: 1,\r\n            },\r\n          ],\r\n          cartId: cartId,\r\n        };\r\n        if (cartId !== null) {\r\n          const res = await apiCall(\r\n            \"PATCH\",\r\n            `cart/guest/${cartId}`,\r\n            token,\r\n            data\r\n          );\r\n          if (res?.data?.status === \"success\") {\r\n            toast.success(\"success\");\r\n            setTriggerGuestCart(!triggerGuestCart);\r\n          }\r\n        }\r\n      }\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleIncrease = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      if (token && auth?.isVerified) {\r\n        const data = [\r\n          {\r\n            productId: product?.productId?._id,\r\n            quantity: 1,\r\n          },\r\n        ];\r\n        if (product?.productId?.inStock <= product?.quantity) {\r\n          return toast.error(\"Item is out of stock\");\r\n        }\r\n        const res = await apiCall(\r\n          \"POST\",\r\n          `cart/${auth?.user?.id}`,\r\n          token,\r\n          data\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          toast.success(\"success\");\r\n          setTriggerLoginCart(!triggerLoginCart);\r\n        }\r\n      } else {\r\n        const cartId =\r\n          typeof window !== \"undefined\" ? localStorage.getItem(\"cartId\") : \"\";\r\n        const data = {\r\n          cartId: cartId,\r\n          products: [\r\n            {\r\n              productId: product?.productId?._id,\r\n              quantity: 1,\r\n            },\r\n          ],\r\n        };\r\n        const res = await apiCall(\"POST\", `cart`, \"\", data);\r\n\r\n        if (res?.data?.status === \"success\") {\r\n          toast.success(\"success\");\r\n          localStorage.setItem(\"cartId\", res?.data?.Data?._id);\r\n          setTriggerGuestCart(!triggerGuestCart);\r\n        }\r\n      }\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n  const { width } = useWindowSize();\r\n  const truncate = (input, length) =>\r\n    input?.length > length ? `${input.substring(0, length)}...` : input;\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        marginTop: \"10px\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n        padding: { xs: \"0%\", sm: \"0px 5%\" },\r\n      }}\r\n    >\r\n      <Box\r\n        sx={{\r\n          marginTop: \"10px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            width: \"90px\",\r\n            height: \"90px\",\r\n            objectFit: \"cover\",\r\n            marginRight: \"25px\",\r\n          }}\r\n        >\r\n          <img\r\n            src={product?.productId?.images?.[0]?.url}\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n            alt={product?.productId?.title}\r\n          />\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\">\r\n            {width < 700\r\n              ? truncate(product?.productId?.title, 10)\r\n              : product?.productId?.title}\r\n          </Typography>\r\n          <Box sx={{ display: \"flex\" }}>\r\n            {product?.productId?.discountPrice && (\r\n              <Typography variant=\"body1\">\r\n                Rs. {product?.productId?.discountPrice * product?.quantity}\r\n              </Typography>\r\n            )}\r\n            <Typography\r\n              variant=\"body1\"\r\n              sx={{\r\n                marginLeft: \"15px\",\r\n                textDecoration: product?.productId?.discountPrice\r\n                  ? \"line-through\"\r\n                  : \"none\",\r\n                color: product?.productId?.discountPrice ? \"crimson\" : \"#000\",\r\n              }}\r\n            >\r\n              Rs. {product?.productId?.price * product?.quantity}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n\r\n      <Box sx={{ display: \"flex\" }}>\r\n        <Box\r\n          sx={{\r\n            marginRight: { xs: \"10px\", sm: \"25px\" },\r\n            marginLeft: {\r\n              xs: \"10px\",\r\n              md: \"\",\r\n            },\r\n          }}\r\n        >\r\n          <IncrementDecrementCounter\r\n            handleDecrease={handleDecrease}\r\n            handleIncrease={handleIncrease}\r\n            product={product}\r\n            isLoading={isLoading}\r\n          />\r\n        </Box>\r\n\r\n        {isDeleteLoading ? (\r\n          <CircularProgress\r\n            sx={{\r\n              color: \"#539165\",\r\n            }}\r\n            size={25}\r\n          />\r\n        ) : (\r\n          <Button\r\n            sx={{\r\n              border: \"1px solid red\",\r\n              marginRight: \"10px\",\r\n              padding: \"3px\",\r\n              minWidth: \"fit-content\",\r\n            }}\r\n            onClick={() => handleDelete(product)}\r\n          >\r\n            <DeleteIcon sx={{ color: \"red\" }} />\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CartProduct;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CartSummary\\index.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CategoryCard\\CategoryCard.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CouponCode\\CouponCode.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CreateProduct\\CreateProduct.js",["536","537"],[],"import React, { useEffect, useState } from \"react\";\r\n// import CustomTabs from \"../../../../components/CustomTabs/CustomTabs\";\r\n// import Wrapper from \"../../../../components/Wrapper/Wrapper\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Checkbox,\r\n  CircularProgress,\r\n  FormControlLabel,\r\n  Grid,\r\n  Paper,\r\n  Typography,\r\n} from \"@mui/material\";\r\n// import BoxShadowWrapper from \"../../../../components/BoxShadowWrapper\";\r\n// import CustomInputBox from \"../../../../components/CustomInputBox/CustomInputBox\";\r\n// import Dropdown from \"../../../../components/Dropdown/Dropdown\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { imageUpload } from \"@/utils/imageUpload\";\r\nimport Wrapper from \"../Wrapper/Wrapper\";\r\nimport CustomTabs from \"../CustomTabs/CustomTabs\";\r\nimport BoxShadowWrapper from \"../BoxShadowWrapper\";\r\nimport CustomInputBox from \"../CustomInputBox/CustomInputBox\";\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\nimport { useRouter } from \"next/router\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction CreateProduct() {\r\n  const router = useRouter();\r\n  const initialData = {\r\n    title: \"\",\r\n    price: \"\",\r\n    inStock: \"\",\r\n    description: \"\",\r\n    discount: \"\",\r\n    type: \"\",\r\n  };\r\n  const [isSubmitLoading, setIsSubmitLoading] = useState(false);\r\n  const [productData, setProductData] = useState(initialData);\r\n  const [images, setImages] = useState([]);\r\n  const [selectedImg, setSelectedImg] = useState(null);\r\n  const [categories, setCategories] = useState(null);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n\r\n  const { id } = router.query;\r\n  useEffect(() => {\r\n    const fetchProduct = async () => {\r\n      if (id) {\r\n        try {\r\n          const res = await apiCall(\"GET\", `product/${id}`);\r\n          if (res?.data?.status === \"success\") {\r\n            console.log({ res });\r\n            const {\r\n              title,\r\n              inStock,\r\n              price,\r\n              description,\r\n              images,\r\n              discount,\r\n              type,\r\n            } = res?.data?.Data;\r\n            console.log({ type });\r\n            setProductData({\r\n              title,\r\n              inStock,\r\n              price,\r\n              description,\r\n              discount,\r\n              type,\r\n            });\r\n            setImages(images);\r\n            setSelectedCategory(res?.data?.category);\r\n            setIsEdit(true);\r\n          }\r\n        } catch (error) {\r\n          toast.error(error?.response?.data?.err);\r\n          setIsEdit(false);\r\n        }\r\n      }\r\n    };\r\n    fetchProduct();\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const res = await apiCall(\"GET\", \"category\");\r\n        if (res?.data?.status === \"success\") {\r\n          setCategories(res?.data?.Data?.categories);\r\n        }\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n      }\r\n    };\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const handleUploadInput = (e) => {\r\n    let newImages = [];\r\n    let num = 0;\r\n    let err = \"\";\r\n    const files = [...e.target.files];\r\n    if (files.length === 0) {\r\n      return toast.error(\"File does not exist.\");\r\n    }\r\n    files.forEach((file) => {\r\n      if (file.size > 1024 * 1024) {\r\n        return (err = \"Image size should be lesser than 1 mb.\");\r\n      }\r\n      num += 1;\r\n      if (num <= 5) newImages.push(file);\r\n      return newImages;\r\n    });\r\n    if (err) {\r\n      return toast.error(err);\r\n    }\r\n    const imageCount = images?.length;\r\n    if (imageCount + newImages?.length > 5) {\r\n      return toast.error(\"Upto 5 images can be selected\");\r\n    }\r\n    setImages([...images, ...newImages]);\r\n  };\r\n\r\n  const validate = () => {\r\n    let errors = {};\r\n    let valid = true;\r\n    if (\r\n      !productData?.title ||\r\n      !productData?.price ||\r\n      !productData?.description ||\r\n      !productData?.inStock\r\n    ) {\r\n      errors[\"all\"] = \"Please enter all required fields\";\r\n      valid = false;\r\n    }\r\n    if (productData?.title?.length < 5) {\r\n      errors[\"title\"] = \"Title should be atleast 3 letters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (productData?.description?.length < 15) {\r\n      errors[\"description\"] =\r\n        \"Description should be atleast 15 characters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (Number(productData?.inStock) <= 0) {\r\n      errors[\"inStock\"] = \"Stock should be greater than zero.\";\r\n      valid = false;\r\n    }\r\n\r\n    if (selectedCategory?.name?.length === 0) {\r\n      errors[\"category\"] = \"Please select appropriate category\";\r\n      valid = false;\r\n    }\r\n\r\n    if (images.length === 0) {\r\n      errors[\"image\"] = \"Image is a required field\";\r\n      valid = false;\r\n    }\r\n    setError(errors);\r\n    return valid;\r\n  };\r\n  // Create or update product\r\n  const handleProduct = async (e) => {\r\n    e.preventDefault();\r\n    const { title, price, description, inStock, discount, type } = productData;\r\n    const data = {\r\n      title: title,\r\n      price: price,\r\n      description: description,\r\n      inStock: inStock,\r\n      category: selectedCategory?._id,\r\n      discount: discount,\r\n      type: type,\r\n    };\r\n    const isValid = validate();\r\n    if (isValid) {\r\n      try {\r\n        setIsSubmitLoading(true);\r\n        let media = [];\r\n\r\n        const imageNewURL = images?.filter((img) => !img?.url);\r\n        const imageOldURL = images?.filter((img) => img?.url);\r\n\r\n        if (imageNewURL?.length > 0) media = await imageUpload(imageNewURL);\r\n        if (media?.length > 0 || images?.length > 0) {\r\n          if (id) {\r\n            const res = await apiCall(\"PATCH\", `product/${id}`, token, {\r\n              ...data,\r\n              images: [...imageOldURL, ...media],\r\n            });\r\n            console.log({ res });\r\n            if (res?.data?.status === \"success\") {\r\n              toast.success(\"Product updated!\");\r\n              setProductData(initialData);\r\n              setImages([]);\r\n              setSelectedCategory(null);\r\n              // router.push(\"/adminDashboard/products\");\r\n            }\r\n          } else {\r\n            const res = await apiCall(\"POST\", \"product\", token, {\r\n              ...data,\r\n              images: [...imageOldURL, ...media],\r\n            });\r\n            if (res?.data?.status === \"success\") {\r\n              toast.success(\"Product created!\");\r\n              setProductData(initialData);\r\n              setImages([]);\r\n              setSelectedCategory(null);\r\n              router.push(\"/adminDashboard/products\");\r\n            }\r\n          }\r\n        }\r\n        setIsSubmitLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setIsSubmitLoading(false);\r\n      }\r\n    }\r\n  };\r\n  const handleDelete = (index) => {\r\n    const newArr = [...images];\r\n    newArr.splice(index);\r\n    setSelectedImg(null);\r\n    setImages(newArr);\r\n  };\r\n  const [checked, setChecked] = React.useState(\r\n    productData?.type === \"banner\" ? true : false\r\n  );\r\n\r\n  useEffect(() => {\r\n    setChecked(productData?.type === \"banner\" ? true : false);\r\n  }, [productData?.type]);\r\n\r\n  const handleChange = (event) => {\r\n    setChecked(event.target.checked);\r\n    setProductData({\r\n      ...productData,\r\n      type: event.target.checked ? \"banner\" : \"regular\",\r\n    });\r\n  };\r\n  console.log({ checked, productData });\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <Button\r\n          startIcon={<ArrowBackIosIcon />}\r\n          onClick={() => router.push(\"/adminDashboard/products\")}\r\n        >\r\n          Back\r\n        </Button>\r\n        <Grid container columnSpacing={5}>\r\n          <Grid item xs={12} sm={12} md={8}>\r\n            <BoxShadowWrapper>\r\n              <Typography sx={{ fontSize: \"18px\" }}>\r\n                Enter Product Details\r\n              </Typography>\r\n              <CustomInputBox\r\n                id={\"productTitle\"}\r\n                label={\"Product Title\"}\r\n                name={\"productTitle\"}\r\n                value={productData?.title}\r\n                onChange={(e) =>\r\n                  setProductData({ ...productData, title: e.target.value })\r\n                }\r\n                // errorValue={error?.name}\r\n                inputStyle={{\r\n                  width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                }}\r\n                required={true}\r\n              />\r\n              <CustomInputBox\r\n                type={\"number\"}\r\n                id={\"price\"}\r\n                label={\"Price\"}\r\n                name={\"price\"}\r\n                value={productData?.price}\r\n                onChange={(e) =>\r\n                  setProductData({ ...productData, price: e.target.value })\r\n                }\r\n                // errorValue={error?.name}\r\n                inputStyle={{\r\n                  width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                }}\r\n                required={true}\r\n              />\r\n              <CustomInputBox\r\n                id={\"description\"}\r\n                label={\"Description\"}\r\n                name={\"description\"}\r\n                value={productData?.description}\r\n                onChange={(e) =>\r\n                  setProductData({\r\n                    ...productData,\r\n                    description: e.target.value,\r\n                  })\r\n                }\r\n                // errorValue={error?.name}\r\n                inputStyle={{\r\n                  width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                }}\r\n                required={true}\r\n              />\r\n              <Box sx={{ marginBottom: \"10px\", marginTop: \"10px\" }}>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  value={\"\"}\r\n                  style={{ display: \"none\" }}\r\n                  id=\"raised-button-file\"\r\n                  multiple\r\n                  type=\"file\"\r\n                  onChange={handleUploadInput}\r\n                />\r\n                <label htmlFor=\"raised-button-file\">\r\n                  <Button\r\n                    component=\"span\"\r\n                    variant=\"outlined\"\r\n                    sx={{\r\n                      width: \"fit-content\",\r\n                      mt: 1,\r\n                      mb: 1,\r\n                      borderRadius: \"30px\",\r\n                    }}\r\n                  >\r\n                    Add Image\r\n                  </Button>\r\n                </label>\r\n                {/* {<Typography>({`${images?.name}`})</Typography>} */}\r\n              </Box>\r\n              <CustomInputBox\r\n                id={\"inStock\"}\r\n                label={\"Stock Available\"}\r\n                name={\"inStock\"}\r\n                value={productData?.inStock}\r\n                onChange={(e) =>\r\n                  setProductData({\r\n                    ...productData,\r\n                    inStock: e.target.value,\r\n                  })\r\n                }\r\n                // errorValue={error?.name}\r\n                inputStyle={{\r\n                  width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                }}\r\n                required={true}\r\n                type=\"number\"\r\n              />\r\n              <CustomInputBox\r\n                type=\"number\"\r\n                id={\"discount\"}\r\n                label={\"% Discount\"}\r\n                name={\"discount\"}\r\n                value={productData?.discount}\r\n                onChange={(e) =>\r\n                  setProductData({\r\n                    ...productData,\r\n                    discount: e.target.value,\r\n                  })\r\n                }\r\n                // errorValue={error?.name}\r\n                inputStyle={{\r\n                  width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                }}\r\n                // required={true}\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={checked}\r\n                    value={\"banner\"}\r\n                    onChange={handleChange}\r\n                    inputProps={{ \"aria-label\": \"controlled\" }}\r\n                  />\r\n                }\r\n                label=\"Show in top banner\"\r\n              />\r\n\r\n              {isEdit && selectedCategory?.name && (\r\n                <Dropdown\r\n                  data={categories}\r\n                  defaultValue={\r\n                    selectedCategory === null\r\n                      ? \"Select Category\"\r\n                      : selectedCategory?.name\r\n                  }\r\n                  title={\"Category\"}\r\n                  setSelectedValue={setSelectedCategory}\r\n                />\r\n              )}\r\n              {isEdit === false && (\r\n                <Dropdown\r\n                  data={categories}\r\n                  defaultValue={\"Select Category\"}\r\n                  title={\"Category\"}\r\n                  setSelectedValue={setSelectedCategory}\r\n                />\r\n              )}\r\n\r\n              {isSubmitLoading ? (\r\n                <CircularProgress\r\n                  sx={{\r\n                    color: \"#539165\",\r\n                    marginLeft: \"50%\",\r\n                    mt: 3,\r\n                    mb: 2,\r\n                  }}\r\n                  size={20}\r\n                />\r\n              ) : (\r\n                <Button\r\n                  // onClick={handleSubmit}\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    mt: 2,\r\n                    mb: 2,\r\n                    background: \"#539165\",\r\n                    \"&:hover\": { background: \"#539165\" },\r\n                    borderRadius: \"30px\",\r\n                    height: \"40px\",\r\n                  }}\r\n                  // disabled={!images || !name}\r\n                  onClick={handleProduct}\r\n                >\r\n                  {isEdit ? \"Edit\" : \"Create\"}\r\n                </Button>\r\n              )}\r\n            </BoxShadowWrapper>\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={4}>\r\n            <BoxShadowWrapper>\r\n              <Typography sx={{ fontSize: \"18px\" }}>Preview Images</Typography>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  flexWrap: \"wrap\",\r\n                  marginBottom: \"10px\",\r\n                }}\r\n              >\r\n                {images?.map((img, index) => (\r\n                  <Paper\r\n                    sx={{\r\n                      width: \"100px\",\r\n                      height: \"80px\",\r\n                      borderRadius: \"8px\",\r\n                      padding: \"3px\",\r\n                      margin: \"7px\",\r\n                      border:\r\n                        img?.name === selectedImg?.name ? \"1px solid red\" : \"\",\r\n                      position: \"relative\",\r\n                    }}\r\n                    key={shortid.generate()}\r\n                  >\r\n                    <img\r\n                      src={img.url ? img.url : URL.createObjectURL(img)}\r\n                      style={{\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => setSelectedImg(img)}\r\n                      alt={\"Preview Image\"}\r\n                    />\r\n                    <span\r\n                      style={{\r\n                        background: \"crimson\",\r\n                        height: \"20px\",\r\n                        width: \"20px\",\r\n                        borderRadius: \"50%\",\r\n                        padding: \"0px 6px\",\r\n                        display: \"block\",\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        right: 0,\r\n                        fontSize: \"15px\",\r\n                        color: \"#fff\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => handleDelete(index)}\r\n                    >\r\n                      x\r\n                    </span>\r\n                  </Paper>\r\n                ))}\r\n              </Box>\r\n              {selectedImg && (\r\n                <Paper>\r\n                  <Typography sx={{ fontSize: \"18px\" }}>\r\n                    Selected Image\r\n                  </Typography>\r\n                  <img\r\n                    src={\r\n                      selectedImg?.url\r\n                        ? selectedImg?.url\r\n                        : URL.createObjectURL(selectedImg)\r\n                    }\r\n                    style={{ width: \"100%\", height: \"285px\" }}\r\n                    alt={\"Preview Image\"}\r\n                  />\r\n                </Paper>\r\n              )}\r\n            </BoxShadowWrapper>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default CreateProduct;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CustomInputBox\\CustomInputBox.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\CustomTabs\\CustomTabs.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\DatePickerComponent\\DatePickerComponent.js",["538"],[],"import { Box, Button } from \"@mui/material\";\r\nimport React, { forwardRef, useRef, useState } from \"react\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nconst DatePickerComponent = ({\r\n  dateRange,\r\n  setDateRange,\r\n  startDate,\r\n  endDate,\r\n  handleDateSelect = () => {},\r\n  range = false,\r\n  labelProp,\r\n  isApplyButton = false,\r\n  maxDate,\r\n}) => {\r\n  const refCustomInput = useRef();\r\n  const ExampleCustomInput = forwardRef(({ value, onClick }, ref) => (\r\n    <Button\r\n      className=\"example-custom-input\"\r\n      // style={{ background: \"red\" }}\r\n      onClick={onClick}\r\n      ref={ref}\r\n    >\r\n      {value ? value : labelProp}\r\n    </Button>\r\n  ));\r\n  return (\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ReactDatePicker\r\n        selectsRange={range}\r\n        startDate={startDate}\r\n        endDate={endDate}\r\n        selected={range === false && dateRange}\r\n        onChange={(update) => {\r\n          setDateRange(update);\r\n        }}\r\n        // customInput={<ExampleCustomInput />}\r\n        customInput={<ExampleCustomInput ref={refCustomInput} />}\r\n        withPortal\r\n        maxDate={maxDate}\r\n        dateFormat=\"dd/MM/yyyy\"\r\n      />\r\n      {isApplyButton && (\r\n        <Button\r\n          onClick={() => {\r\n            handleDateSelect(startDate, endDate);\r\n          }}\r\n          disabled={!endDate || !startDate}\r\n        >\r\n          Apply\r\n        </Button>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DatePickerComponent;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Demo.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\DetailOrder\\DetailOrder.js",["539","540"],[],"import { apiCall } from \"@/utils/apiCall\";\r\nimport { Box, Button, CircularProgress, Grid, Typography } from \"@mui/material\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport BoxShadowWrapper from \"../BoxShadowWrapper\";\r\nimport TableComponent from \"../TableComponent/TableComponent\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { addToCart } from \"../../store/Actions\";\r\n\r\nfunction DetailOrder() {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const router = useRouter();\r\n  const [orderData, setOrderData] = useState([]);\r\n  const [orderTableData, setOrderTableData] = useState([]);\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const [cart, setCart] = useState(false);\r\n  const [deliveryCallTriggered, setDeliveryCallTriggered] = useState(false);\r\n  const [total, setTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (token && auth?.isVerified) {\r\n      const fetchCart = async () => {\r\n        const res = await apiCall(\"GET\", `cart/${auth?.user?.id}`, token);\r\n\r\n        if (res?.data?.status === \"success\") {\r\n          const totalQuantity = res?.data?.Data?.cart?.[0]?.products?.reduce(\r\n            (acc, curr) => acc + curr?.quantity,\r\n            0\r\n          );\r\n          setCart(res?.data?.Data?.cart?.[0]?.products);\r\n          setTotal(\r\n            res?.data?.Data?.totalAmount - res?.data?.Data?.cart?.[0]?.discount\r\n          );\r\n          dispatch(\r\n            addToCart(\r\n              \"\",\r\n              \"\",\r\n              totalQuantity,\r\n              res?.data?.Data?.totalAmount -\r\n                res?.data?.Data?.cart?.[0]?.discount\r\n            )\r\n          );\r\n        }\r\n      };\r\n      fetchCart();\r\n    }\r\n  }, [auth?.isVerified]);\r\n\r\n  const tableHeadings = [\"Image\", \"Name\", \"Price\", \"Quantity\", \"Sub-total\"];\r\n  const handlePayment = async () => {\r\n    const data = {\r\n      cart: cart,\r\n      userId: auth?.user?.id,\r\n      orderId: router?.query?.id,\r\n      total: total,\r\n    };\r\n    router.push(`/payment?orderId=${router?.query?.id}`);\r\n  };\r\n\r\n  const handleDelivery = async () => {\r\n    if (orderData?.payment_status === true) {\r\n      try {\r\n        if (auth?.user?.role === \"admin\" || auth?.root === true) {\r\n          const data = {\r\n            orderId: router?.query?.id,\r\n            payment_status: orderData?.payment_status,\r\n          };\r\n          const res = await apiCall(\"PUT\", \"order/delivery\", token, data);\r\n          if (res?.data?.status === \"success\") {\r\n            setDeliveryCallTriggered(true);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n      }\r\n    } else {\r\n      toast.error(\r\n        \"Payment for this order is not done yet. It cannot be marked as delivered.\"\r\n      );\r\n    }\r\n  };\r\n  console.log({ state });\r\n\r\n  useEffect(() => {\r\n    const fetchOrder = async () => {\r\n      setIsLoading(true);\r\n      if (router?.query?.id) {\r\n        const res = await apiCall(\"GET\", `order/${router?.query?.id}`, token);\r\n        console.log(res);\r\n        if (res?.data?.status === \"success\") {\r\n          const formatedData = res?.data?.Data?.cart?.map((order) => {\r\n            return {\r\n              firstCol: order?.productId?.images?.[0]?.url,\r\n              secondCol: order?.productId?.title,\r\n              thirdCol: (\r\n                <Box>\r\n                  {`₹ ${\r\n                    order?.productId?.discount > 0\r\n                      ? order?.productId?.discountPrice\r\n                      : order?.productId?.price\r\n                  }`}\r\n                </Box>\r\n              ),\r\n              fourthCol: order?.quantity,\r\n              fifthCol: `₹ ${\r\n                order?.productId?.discount > 0\r\n                  ? order?.productId?.discountPrice * order?.quantity\r\n                  : order?.productId?.price * order?.quantity\r\n              }`,\r\n            };\r\n          });\r\n          setOrderTableData(formatedData);\r\n          setOrderData(res?.data?.Data);\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n    fetchOrder();\r\n  }, [router.query, deliveryCallTriggered]);\r\n  if (isLoading) {\r\n    return (\r\n      <CircularProgress\r\n        sx={{\r\n          color: \"#539165\",\r\n          marginLeft: \"50%\",\r\n          mt: 3,\r\n          mb: 2,\r\n        }}\r\n        size={32}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid container columnSpacing={5}>\r\n      <Grid item xs={12} sm={8} md={9}>\r\n        <Typography sx={{ fontSize: \"24px\", textTransform: \"uppercase\" }}>\r\n          Order Id: {orderData?._id}\r\n        </Typography>\r\n        <BoxShadowWrapper>\r\n          <Typography sx={{ fontSize: \"22px\", marginBottom: \"10px\" }}>\r\n            Shipping Address\r\n          </Typography>\r\n          <Typography\r\n            sx={{ fontSize: \"18px\", display: \"flex\", flexWrap: \"wrap\" }}\r\n          >\r\n            <span>{orderData?.address?.name && orderData?.address?.name}</span>,\r\n            <span>\r\n              {orderData?.address?.address1 && orderData?.address?.address1}\r\n            </span>\r\n            ,\r\n            <span>\r\n              {orderData?.address?.address2 && orderData?.address?.address2}\r\n            </span>\r\n            ,<span>{orderData?.address?.city && orderData?.address?.city}</span>\r\n            ,\r\n            <span>\r\n              {orderData?.address?.state && orderData?.address?.state}\r\n            </span>\r\n            ,\r\n            <span>\r\n              {orderData?.address?.phone && orderData?.address?.phone}\r\n            </span>\r\n          </Typography>\r\n        </BoxShadowWrapper>\r\n        <BoxShadowWrapper>\r\n          <Typography sx={{ fontSize: \"22px\", marginBottom: \"10px\" }}>\r\n            Payment Status\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              background:\r\n                orderData?.payment_status === true ? \"lightgreen\" : \"#fee2e2\",\r\n              padding: \"8px 12px\",\r\n              fontSize: \"18px\",\r\n              color: orderData?.payment_status === true ? \"green\" : \"#c04856\",\r\n              borderRadius: \"5px\",\r\n            }}\r\n          >\r\n            {orderData?.payment_status === true\r\n              ? `Paid -  ${new Date(orderData?.dateOfPayment)?.toDateString()}`\r\n              : \"Not Paid\"}\r\n          </Typography>\r\n        </BoxShadowWrapper>\r\n        <BoxShadowWrapper>\r\n          <Typography sx={{ fontSize: \"22px\", marginBottom: \"10px\" }}>\r\n            Delivery Status\r\n          </Typography>\r\n          <Typography\r\n            sx={{\r\n              background:\r\n                orderData?.delivered === true ? \"lightgreen\" : \"#fee2e2\",\r\n              padding: \"8px 12px\",\r\n              fontSize: \"18px\",\r\n              color: orderData?.delivered === true ? \"green\" : \"#c04856\",\r\n              borderRadius: \"5px\",\r\n            }}\r\n          >\r\n            {orderData?.delivered === false\r\n              ? \"Not Delivered\"\r\n              : `Delivered - ${new Date(\r\n                  orderData?.dateOfDelivery\r\n                )?.toDateString()}`}\r\n          </Typography>\r\n        </BoxShadowWrapper>\r\n        <BoxShadowWrapper>\r\n          <TableComponent\r\n            title={\"Order Items\"}\r\n            tableHeadings={tableHeadings}\r\n            tableHeadingsStyle={{ fontSize: \"18px\" }}\r\n            imageContainerStyle={{\r\n              width: \"80px\",\r\n              height: \"80px\",\r\n              objectFit: \"cover\",\r\n            }}\r\n            imageStyle={{ height: \"100%\", width: \"100%\", flex: 1 }}\r\n            tableBodyStyle={{ fontSize: \"18px\" }}\r\n            tableBodyData={orderTableData}\r\n            isImage={true}\r\n          />\r\n        </BoxShadowWrapper>\r\n      </Grid>\r\n      <Grid item xs={12} sm={3} md={3} marginTop={\"35px\"}>\r\n        <BoxShadowWrapper>\r\n          <Typography sx={{ fontSize: \"24px\", textTransform: \"uppercase\" }}>\r\n            Total: ₹{Math.floor(orderData?.total - orderData?.discount)}\r\n          </Typography>\r\n          {auth?.user?.role === \"user\" && orderData?.payment_status === true ? (\r\n            <Typography sx={{ fontSize: \"18px\", marginTop: \"10px\" }}>\r\n              Already Paid\r\n            </Typography>\r\n          ) : (auth?.user?.role === \"admin\" || auth?.root === true) &&\r\n            orderData?.delivered === false ? (\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{\r\n                mt: 3,\r\n                mb: 2,\r\n                background: \"#539165\",\r\n                \"&:hover\": { background: \"#539165\" },\r\n                height: \"45px\",\r\n                borderRadius: \"30px\",\r\n                fontSize: \"18px\",\r\n              }}\r\n              onClick={() => handleDelivery()}\r\n            >\r\n              Deliver Order\r\n            </Button>\r\n          ) : (auth?.user?.role === \"admin\" || auth?.root === true) &&\r\n            orderData?.delivered === true ? (\r\n            <Typography sx={{ fontSize: \"18px\", marginTop: \"10px\" }}>\r\n              Delivered\r\n            </Typography>\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{\r\n                mt: 3,\r\n                mb: 2,\r\n                background: \"#539165\",\r\n                \"&:hover\": { background: \"#539165\" },\r\n                height: \"45px\",\r\n                borderRadius: \"30px\",\r\n                fontSize: \"18px\",\r\n              }}\r\n              onClick={() => handlePayment()}\r\n            >\r\n              Pay\r\n            </Button>\r\n          )}\r\n        </BoxShadowWrapper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default DetailOrder;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Dropdown\\Dropdown.js",["541","542"],[],"import * as React from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport Select from \"@mui/material/Select\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nexport default function Dropdown({\r\n  data = [],\r\n  defaultValue = \"\",\r\n  title = \"\",\r\n  setSelectedValue = () => {},\r\n}) {\r\n  const [value, setValue] = React.useState(defaultValue);\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ minWidth: 120, marginTop: \"10px\", marginBottom: \"10px\" }}>\r\n      <InputLabel>{title}</InputLabel>\r\n      <FormControl fullWidth>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={value}\r\n          label=\"Age\"\r\n          onChange={handleChange}\r\n          defaultValue={defaultValue}\r\n          variant=\"standard\"\r\n          renderValue={(selected) => {\r\n            if (!selected) {\r\n              return <Typography>\"View\"</Typography>;\r\n            } else {\r\n              return <Typography>{value}</Typography>;\r\n            }\r\n          }}\r\n        >\r\n          {data?.map((item) => (\r\n            <MenuItem\r\n              value={item?.name}\r\n              key={item?._id}\r\n              onClick={() => setSelectedValue(item)}\r\n            >\r\n              {item?.name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </Box>\r\n  );\r\n}\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\HeroBanner\\HeroBanner.js",["543"],[],"import React from \"react\";\r\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\"; // requires a loader\r\nimport { Carousel } from \"react-responsive-carousel\";\r\nimport ChevronLeftIcon from \"@mui/icons-material/ChevronLeft\";\r\nimport ChevronRightIcon from \"@mui/icons-material/ChevronRight\";\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport { useRouter } from \"next/router\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction HeroBanner({ items }) {\r\n  const router = useRouter();\r\n  return (\r\n    <Box\r\n      sx={{\r\n        position: \"relative\",\r\n        color: \"white\",\r\n        fontSize: \"20px\",\r\n        width: \"100%\",\r\n        maxWidth: \"1400px\",\r\n        margin: \"0px auto\",\r\n        height: {\r\n          xs: \"\",\r\n          sm: \"\",\r\n          md: \"60vh\",\r\n        },\r\n      }}\r\n    >\r\n      <Carousel\r\n        autoPlay={true}\r\n        infiniteLoop={true}\r\n        showThumbs={false}\r\n        showIndicators={false}\r\n        showStatus={false}\r\n        renderArrowPrev={(clickHandler, hasPrev) => (\r\n          <Box\r\n            onClick={clickHandler}\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: {\r\n                xs: \"50px\",\r\n                md: \"51px\",\r\n              },\r\n              bottom: \"10%\",\r\n              width: \"30px\",\r\n              background: \"red\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              height: \"30px\",\r\n              zIndex: 10,\r\n              cursor: \"pointer\",\r\n            }}\r\n            className=\"absolute right-[31px] md:right-[51px] bottom-0 w-[30px] md:w-[50px] h-[30px] md:h-[50px] bg-black z-10 flex items-center justify-center cursor-pointer hover:opacity-90\"\r\n          >\r\n            <ChevronLeftIcon />\r\n          </Box>\r\n        )}\r\n        renderArrowNext={(clickHandler, hasNext) => (\r\n          <Box\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: \"20px\",\r\n              bottom: \"10%\",\r\n              width: \"30px\",\r\n              background: \"red\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              justifyContent: \"center\",\r\n              height: \"30px\",\r\n              zIndex: 10,\r\n              cursor: \"pointer\",\r\n            }}\r\n            onClick={clickHandler}\r\n            className=\"absolute right-0 bottom-0 w-[30px] md:w-[50px] h-[30px] md:h-[50px] bg-black z-10 flex items-center justify-center cursor-pointer hover:opacity-90\"\r\n          >\r\n            <ChevronRightIcon />\r\n          </Box>\r\n        )}\r\n      >\r\n        {items?.map((item) => (\r\n          <Box\r\n            sx={{\r\n              height: { xs: \"30vh\", md: \"100%\" },\r\n              width: \"100%\",\r\n              objectFit: \"cover\",\r\n              position: \"relative\",\r\n            }}\r\n            key={shortid.generate()}\r\n          >\r\n            <img\r\n              src={item?.images?.[0]?.url}\r\n              alt={item?.title}\r\n              className=\"aspect-[16/10] md:aspect-auto object-cover\"\r\n            />\r\n            <Box\r\n              sx={{\r\n                position: \"absolute\",\r\n                color: \"black\",\r\n                bottom: \"12%\",\r\n                left: 0,\r\n                fontSize: {\r\n                  xs: \"20px\",\r\n                  md: \"25px\",\r\n                },\r\n                zIndex: \"20\",\r\n                background: \"white\",\r\n                textTransform: \"uppercase\",\r\n                padding: \"10px\",\r\n                boxShadow: \"1px 5px 5px grey\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={() => router.push(`/product/${item?._id}`)}\r\n            >\r\n              Shop now\r\n            </Box>\r\n            <Typography\r\n              sx={{\r\n                position: \"absolute\",\r\n                top: \"15px\",\r\n                left: \"2%\",\r\n                fontSize: \"20px\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              {item?.title}\r\n            </Typography>\r\n          </Box>\r\n        ))}\r\n      </Carousel>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default HeroBanner;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\HomeCategoryCard\\HomeCategoryCard.js",["544"],[],"import { Box, Paper, Typography } from \"@mui/material\";\r\nimport { useRouter } from \"next/router\";\r\nimport React from \"react\";\r\n\r\nfunction HomeCategoryCard({ category }) {\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <Paper\r\n      sx={{\r\n        width: { xs: \"170px\", sm: \"170px\", md: \"250px\" },\r\n        height: { xs: \"150px\", sm: \"150px\", md: \"200px\" },\r\n        marginRight: \"15px\",\r\n        // padding: \"5px\",\r\n        borderRadius: \"8px\",\r\n\r\n        marginBottom: { xs: \"40px\", sm: \"40px\", md: \"50px\" },\r\n        \"&:hover\": {\r\n          transform: \"scale(1.01)\",\r\n          background: \"white\",\r\n          boxShadow: \"1px 8px 8px whitesmoke\",\r\n          \"-webkit-transition\": \"box-shadow .2s ease-in\",\r\n        },\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() =>\r\n        router.push({\r\n          pathname: `/categories/${category?._id}`,\r\n          query: {\r\n            name: category?.name,\r\n          },\r\n        })\r\n      }\r\n    >\r\n      <img\r\n        src={category?.image?.[0]?.url}\r\n        style={{ width: \"100%\", height: \"100%\" }}\r\n        alt={category?.name}\r\n      />\r\n      <Typography\r\n        sx={{\r\n          //   position: \"absolute\",\r\n          //   top: 0,\r\n          fontSize: \"22px\",\r\n          background: \"#ffff\",\r\n          textAlign: \"center\",\r\n        }}\r\n      >\r\n        {category?.name}\r\n      </Typography>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default HomeCategoryCard;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\IncrementDecrementCounter\\IncrementDecrementCounter.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Layout.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\LineChart\\LineChart.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Modal\\CustomModal.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Navbar\\Navbar.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\PaginationComponent\\PaginationComponent.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\PaymentComp\\index.js",["545"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useStripe, useElements, CardElement } from \"@stripe/react-stripe-js\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CircularProgress,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport CardInput from \"../CardInput\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { useRouter } from \"next/router\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nfunction PaymentComp() {\r\n  const router = useRouter();\r\n  const { orderId } = router.query;\r\n  const { state } = useContext(DataContext);\r\n  const { auth, cart } = state;\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  console.log({ cart });\r\n\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n  const orderPayment = async (\r\n    amount,\r\n    paymentId,\r\n    method,\r\n    paymentStatus,\r\n    dateOfPayment\r\n  ) => {\r\n    try {\r\n      const data = {\r\n        orderId: orderId,\r\n        name: auth?.user?.id,\r\n        amount: Math.floor(amount / 100),\r\n        paymentId: paymentId,\r\n        method: method?.[0],\r\n        subTotal: amount,\r\n        paymentStatus: paymentStatus === \"succeeded\" ? true : false,\r\n        dateOfPayment: new Date(Date.now()),\r\n      };\r\n      const res = await apiCall(\"PUT\", \"order/payment\", token, data);\r\n      console.log({ res });\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  };\r\n\r\n  const handleSubmitPay = async (event) => {\r\n    setLoading(true);\r\n    if (!stripe || !elements) {\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    console;\r\n\r\n    const res = await axios.post(\"/api/pay\", {\r\n      email: email,\r\n      amount: cart?.totalAmount,\r\n    });\r\n\r\n    const clientSecret = res.data[\"client_secret\"];\r\n\r\n    const result = await stripe.confirmCardPayment(`${clientSecret}`, {\r\n      payment_method: {\r\n        card: elements.getElement(CardElement),\r\n        billing_details: {\r\n          email: email,\r\n        },\r\n      },\r\n    });\r\n\r\n    console.log({ result, clientSecret });\r\n\r\n    if (result.error) {\r\n      toast.error(result.error.message);\r\n      setLoading(false);\r\n      console.log(result.error.message);\r\n    } else {\r\n      if (result.paymentIntent.status === \"succeeded\") {\r\n        const { amount, id, payment_method_types, status, created } =\r\n          result.paymentIntent;\r\n        console.log({ result });\r\n        orderPayment(amount, id, payment_method_types, status, created);\r\n        setLoading(false);\r\n        router.push(`/success?paymentId=${result?.paymentIntent?.id}`);\r\n        // Show a success message to your customer\r\n        // There's a risk of the customer closing the window before callback\r\n        // execution. Set up a webhook or plugin to listen for the\r\n        // payment_intent.succeeded event that handles any business critical\r\n        // post-payment actions.\r\n      }\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (auth?.user) {\r\n      setEmail(auth?.user?.email);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        maxWidth: \"500px\",\r\n        margin: \"10% auto\",\r\n      }}\r\n    >\r\n      <CardContent\r\n        sx={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          alignContent: \"flex-start\",\r\n        }}\r\n      >\r\n        <TextField\r\n          label=\"Email\"\r\n          id=\"outlined-email-input\"\r\n          helperText={`Email you'll recive updates and receipts on`}\r\n          margin=\"normal\"\r\n          variant=\"outlined\"\r\n          type=\"email\"\r\n          required\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          fullWidth\r\n        />\r\n        <CardInput />\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"flex-start\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          {loading ? (\r\n            <CircularProgress\r\n              sx={{\r\n                color: \"#539165\",\r\n                marginLeft: \"50%\",\r\n                marginTop: \"20px\",\r\n              }}\r\n              size={25}\r\n            />\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{\r\n                mt: 3,\r\n                mb: 2,\r\n                background: \"#539165\",\r\n                \"&:hover\": { background: \"#539165\" },\r\n                height: \"45px\",\r\n                borderRadius: \"30px\",\r\n                fontSize: \"18px\",\r\n              }}\r\n              onClick={() => handleSubmitPay()}\r\n              disabled={!orderId || !stripe || !email || loading}\r\n            >\r\n              Pay\r\n            </Button>\r\n          )}\r\n\r\n          {/* <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.button}\r\n            onClick={handleSubmitSub}\r\n          >\r\n            Subscription\r\n          </Button> */}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default PaymentComp;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\ProductCard\\ProductsCard.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\SearchProductList\\SearchProductList.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\TableComponent\\TableComponent.js",["546"],[],"import {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport ModeEditIcon from \"@mui/icons-material/ModeEdit\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction TableComponent({\r\n  tableHeadings = [],\r\n  tableHeadingsStyle = {},\r\n  tableBodyData = [],\r\n  title = \"\",\r\n  imageContainerStyle = {},\r\n  isImage = false,\r\n  imageStyle = {},\r\n  tableBodyStyle = {},\r\n  isProfile = false,\r\n  handleTableCellClick,\r\n  isAdmin = false,\r\n  type = \"\",\r\n  align = \"left\",\r\n  handleEditCellClick = () => {},\r\n  headerButtonClick = () => {},\r\n  loadingState = false,\r\n}) {\r\n  const truncate = (input, length) =>\r\n    input?.length > length ? `${input.substring(0, length)}...` : input;\r\n  return (\r\n    <TableContainer>\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Typography sx={{ fontSize: \"22px\", marginBottom: \"10px\" }}>\r\n          {title}\r\n        </Typography>\r\n        {type === \"products\" && (\r\n          <Button\r\n            sx={{\r\n              width: \"fit-content\",\r\n              mt: 2,\r\n              mb: 2,\r\n              background: \"#539165\",\r\n              \"&:hover\": { background: \"#539165\" },\r\n              borderRadius: \"30px\",\r\n              height: \"40px\",\r\n              color: \"#fff\",\r\n              padding: \"0px 15px\",\r\n            }}\r\n            onClick={() => headerButtonClick()}\r\n          >\r\n            Create Product\r\n          </Button>\r\n        )}\r\n      </Box>\r\n\r\n      {loadingState ? (\r\n        <CircularProgress\r\n          sx={{\r\n            color: \"#539165\",\r\n            mt: 3,\r\n            mb: 2,\r\n            marginLeft: \"50%\",\r\n          }}\r\n          size={25}\r\n        />\r\n      ) : (\r\n        <Table\r\n          sx={{ minWidth: isProfile ? 630 : 650 }}\r\n          aria-label=\"simple table\"\r\n        >\r\n          <TableHead>\r\n            <TableRow>\r\n              {tableHeadings?.map((heading, i) => (\r\n                <TableCell\r\n                  align={align}\r\n                  sx={tableHeadingsStyle}\r\n                  key={shortid.generate()}\r\n                >\r\n                  {heading}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n\r\n          <TableBody>\r\n            {tableBodyData?.map((item) => (\r\n              <TableRow\r\n                // key={item?.title}\r\n                sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                key={shortid.generate()}\r\n              >\r\n                <TableCell\r\n                  sx={isImage ? imageContainerStyle : tableBodyStyle}\r\n                  scope=\"row\"\r\n                  align={align}\r\n                >\r\n                  {isImage ? (\r\n                    <img\r\n                      src={item?.firstCol}\r\n                      alt={item?.title}\r\n                      style={imageStyle}\r\n                    />\r\n                  ) : (\r\n                    item?.firstCol\r\n                  )}\r\n                </TableCell>\r\n\r\n                <TableCell align={align} sx={tableBodyStyle}>\r\n                  {item?.secondCol}\r\n                </TableCell>\r\n\r\n                <TableCell align={align} sx={tableBodyStyle}>\r\n                  {item?.thirdCol}\r\n                </TableCell>\r\n\r\n                <TableCell align={align} sx={tableBodyStyle}>\r\n                  {item?.fourthCol}\r\n                </TableCell>\r\n                <TableCell align={align} sx={tableBodyStyle}>\r\n                  {item?.fifthCol}\r\n                </TableCell>\r\n\r\n                {/* <TableCell align={align} sx={tableBodyStyle}>\r\n                  {item?.quantity}\r\n                </TableCell> */}\r\n\r\n                <TableCell align={align} sx={tableBodyStyle}>\r\n                  {item?.sixthCol}\r\n                </TableCell>\r\n\r\n                <TableCell\r\n                  align={align}\r\n                  sx={tableBodyStyle}\r\n                  onClick={() =>\r\n                    type === \"orders\" && handleTableCellClick(item?.firstCol)\r\n                  }\r\n                >\r\n                  {item?.sevnthCol}\r\n                </TableCell>\r\n\r\n                {/* <TableCell\r\n                  align={align}\r\n                  sx={{\r\n                    ...tableBodyStyle,\r\n                  }}\r\n                >\r\n                  ₹ {item?.quantity * item?.price}\r\n                </TableCell>\r\n  \r\n                <TableCell align={align} sx={tableBodyStyle}>\r\n                  <Button\r\n                    onClick={() => {\r\n                      (isProfile || isAdmin) && handleTableCellClick(item?._id);\r\n                    }}\r\n                  >\r\n                    Details\r\n                  </Button> */}\r\n\r\n                {/* <Box>\r\n                    <IconButton>\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={handleEditCellClick}>\r\n                      <ModeEditIcon />\r\n                    </IconButton>\r\n                  </Box> */}\r\n                {/* </TableCell> */}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      )}\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nexport default TableComponent;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\components\\Wrapper\\Wrapper.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\config\\createEmotionCache.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\config\\theme.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\addressModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\cartModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\categoryModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\couponModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\orderModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\productModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\models\\userModel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\categories\\index.js",["547","548"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport CustomTabs from \"../../../../components/CustomTabs/CustomTabs\";\r\nimport Wrapper from \"../../../../components/Wrapper/Wrapper\";\r\nimport { Box, Button, CircularProgress, Grid, Typography } from \"@mui/material\";\r\nimport BoxShadowWrapper from \"../../../../components/BoxShadowWrapper\";\r\nimport CustomInputBox from \"../../../../components/CustomInputBox/CustomInputBox\";\r\nimport { toast } from \"react-toastify\";\r\nimport { imageUpload } from \"@/utils/imageUpload\";\r\nimport { DataContext } from \"../../../../store/GlobalState\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport CategoryCard from \"../../../../components/CategoryCard/CategoryCard\";\r\nimport PaginationComponent from \"../../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction Categories() {\r\n  const [triggerCategoryCall, setTriggerCategoryCall] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n  const [images, setImages] = useState(null);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [selectedCategory, setSelectedCategory] = useState(null);\r\n  const [isCategoryListLoading, setIsCategoryListLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        setIsCategoryListLoading(true);\r\n        const res = await apiCall(\r\n          \"GET\",\r\n          `category?page=${page}&limit=${productLimit}`\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          console.log({ res });\r\n          setCategories(res?.data?.Data?.categories);\r\n          setTotalCount(res?.data?.Data?.totalCount);\r\n        }\r\n        setIsCategoryListLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setIsCategoryListLoading(false);\r\n      }\r\n    };\r\n    fetchCategories();\r\n  }, [triggerCategoryCall, page]);\r\n\r\n  const handleUploadInput = (e) => {\r\n    let err = \"\";\r\n    const file = e.target.files[0];\r\n    if (file.length === 0) {\r\n      return toast.error(\"File does not exist.\");\r\n    }\r\n\r\n    if (file?.size > 1024 * 1024) {\r\n      return (err = \"Maximum file size can be 1mb.\");\r\n    }\r\n    if (err) {\r\n      return toast.error(err);\r\n    }\r\n    setImages(file);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    if (auth?.user?.role !== \"admin\" || auth?.user?.root === false) {\r\n      return toast.error(\"Unauthorized access.\");\r\n    }\r\n    let media = [];\r\n    const imageNewURL = images && [images]?.filter((img) => !img.url);\r\n    try {\r\n      if (imageNewURL.length > 0) media = await imageUpload(imageNewURL);\r\n      if (media?.length > 0 || images) {\r\n        const data = {\r\n          name: name,\r\n          image: media?.length > 0 ? media : [images],\r\n        };\r\n        if (isEdit) {\r\n          const res = await apiCall(\r\n            \"PATCH\",\r\n            `category/${selectedCategory?._id}`,\r\n            token,\r\n            data\r\n          );\r\n          if (res?.data?.status === \"success\") {\r\n            setName(\"\");\r\n            setImages(\"\");\r\n            toast.success(\"Category updated.\");\r\n            setIsLoading(false);\r\n            setIsEdit(false);\r\n            setTriggerCategoryCall(!triggerCategoryCall);\r\n          }\r\n        } else {\r\n          const res = await apiCall(\"POST\", \"category\", token, data);\r\n          if (res?.data?.status === \"success\") {\r\n            setName(\"\");\r\n            setImages(null);\r\n            toast.success(res?.data?.msg);\r\n            setIsLoading(false);\r\n            setTriggerCategoryCall(!triggerCategoryCall);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err || \"Something went wrong.\");\r\n      setIsLoading(false);\r\n      setIsEdit(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (category) => {\r\n    try {\r\n      const res = await apiCall(\"DELETE\", `category/${category?._id}`, token);\r\n      if (res?.data?.status === \"success\") {\r\n        toast.success(\"Category deleted.\");\r\n        setTriggerCategoryCall(!triggerCategoryCall);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (category) => {\r\n    setSelectedCategory(category);\r\n    setIsEdit(true);\r\n    setName(category?.name);\r\n    setImages(category?.image?.[0]);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <CustomTabs isAdminTabs={true} active={\"Categories\"}>\r\n          <Grid container columnSpacing={3}>\r\n            <Grid item xs={12} sm={12} md={4}>\r\n              <BoxShadowWrapper\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"18px\" }}>\r\n                  {\" \"}\r\n                  Enter Category Details\r\n                </Typography>\r\n                <CustomInputBox\r\n                  id={\"name\"}\r\n                  label={\"Category Name\"}\r\n                  name={\"name\"}\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  errorValue={error?.name}\r\n                  inputStyle={{\r\n                    width: \"100%\",\r\n                    marginLeft: \"auto\",\r\n                    marginRight: \"auto\",\r\n                  }}\r\n                  required={true}\r\n                />\r\n                <Box sx={{ marginBottom: \"10px\" }}>\r\n                  <input\r\n                    accept=\"image/*\"\r\n                    value={\"\"}\r\n                    style={{ display: \"none\" }}\r\n                    id=\"raised-button-file\"\r\n                    type=\"file\"\r\n                    onChange={handleUploadInput}\r\n                  />\r\n                  <label htmlFor=\"raised-button-file\">\r\n                    <Button\r\n                      component=\"span\"\r\n                      variant=\"outlined\"\r\n                      sx={{\r\n                        width: \"fit-content\",\r\n                        mt: 1,\r\n                        mb: 1,\r\n                        borderRadius: \"30px\",\r\n                      }}\r\n                    >\r\n                      Add image\r\n                    </Button>\r\n                  </label>\r\n                  {images && <Typography>({`${images?.name}`})</Typography>}\r\n                </Box>\r\n                {images && <hr />}\r\n                {images && (\r\n                  <Box sx={{ marginTop: \"5px\" }}>\r\n                    <Typography sx={{ fontSize: \"18px\" }}>Preview</Typography>\r\n                    <img\r\n                      src={\r\n                        images?.url\r\n                          ? images?.url\r\n                          : images\r\n                          ? URL.createObjectURL(images)\r\n                          : \"\"\r\n                      }\r\n                      style={{\r\n                        width: \"100px\",\r\n                        height: \"80px\",\r\n                        borderRadius: \"8px\",\r\n                      }}\r\n                      alt={\"Preview Image\"}\r\n                    />\r\n                  </Box>\r\n                )}\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    sx={{\r\n                      color: \"#539165\",\r\n                      marginLeft: \"auto\",\r\n                      marginRight: \"auto\",\r\n                    }}\r\n                    size={25}\r\n                  />\r\n                ) : (\r\n                  <Button\r\n                    onClick={handleSubmit}\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                      width: \"100%\",\r\n                      mt: 2,\r\n                      mb: 2,\r\n                      background: \"#539165\",\r\n                      \"&:hover\": { background: \"#539165\" },\r\n                      borderRadius: \"30px\",\r\n                      height: \"40px\",\r\n                    }}\r\n                    disabled={!images || !name}\r\n                  >\r\n                    {isEdit ? \"Edit\" : \"Add\"}\r\n                  </Button>\r\n                )}\r\n              </BoxShadowWrapper>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={8}>\r\n              <BoxShadowWrapper\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"18px\" }}>Category List</Typography>\r\n                {categories?.length === 0 && (\r\n                  <Typography sx={{ fontSize: \"18px\", marginTop: \"10px\" }}>\r\n                    No Categories Found. May be create one?\r\n                  </Typography>\r\n                )}\r\n\r\n                {isCategoryListLoading ? (\r\n                  <CircularProgress\r\n                    sx={{\r\n                      color: \"#539165\",\r\n                      mt: 3,\r\n                      mb: 2,\r\n                    }}\r\n                    size={25}\r\n                  />\r\n                ) : (\r\n                  categories?.map((category) => (\r\n                    <CategoryCard\r\n                      key={category?._id}\r\n                      card={category}\r\n                      setName={setName}\r\n                      setImages={setImages}\r\n                      setIsEdit={setIsEdit}\r\n                      setSelectedValue={setSelectedCategory}\r\n                      setTriggerValueCall={setTriggerCategoryCall}\r\n                      triggerValueCall={triggerCategoryCall}\r\n                      handleDelete={handleDelete}\r\n                      handleEdit={handleEdit}\r\n                      modalMessage={\r\n                        \"Are you sure that you want to delete this category?\"\r\n                      }\r\n                    />\r\n                  ))\r\n                )}\r\n                {totalCount > 10 && (\r\n                  <PaginationComponent\r\n                    page={page}\r\n                    setPage={setPage}\r\n                    count={Math.ceil(totalCount / productLimit)}\r\n                  />\r\n                )}\r\n              </BoxShadowWrapper>\r\n            </Grid>\r\n          </Grid>\r\n        </CustomTabs>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Categories;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\coupon\\index.js",["549"],[],"import React, {\r\n  forwardRef,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport CustomTabs from \"../../../../components/CustomTabs/CustomTabs\";\r\nimport Wrapper from \"../../../../components/Wrapper/Wrapper\";\r\nimport { Box, Button, CircularProgress, Grid, Typography } from \"@mui/material\";\r\nimport BoxShadowWrapper from \"../../../../components/BoxShadowWrapper\";\r\nimport CustomInputBox from \"../../../../components/CustomInputBox/CustomInputBox\";\r\nimport { toast } from \"react-toastify\";\r\nimport { imageUpload } from \"@/utils/imageUpload\";\r\nimport { DataContext } from \"../../../../store/GlobalState\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport CategoryCard from \"../../../../components/CategoryCard/CategoryCard\";\r\nimport PaginationComponent from \"../../../../components/PaginationComponent/PaginationComponent\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport DatePickerComponent from \"../../../../components/DatePickerComponent/DatePickerComponent\";\r\n\r\nfunction Coupon() {\r\n  const [triggerCouponCall, setTriggerCouponCall] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [name, setName] = useState(\"\");\r\n  const [expiryDate, setExpiryDate] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [coupons, setCoupons] = useState([]);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [selectedCoupon, setSelectedCoupon] = useState(null);\r\n  const [isCouponListLoading, setIsCouponListLoading] = useState(false);\r\n  const [discountValue, setDiscountValue] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const fetchCoupons = async () => {\r\n      try {\r\n        setIsCouponListLoading(true);\r\n        const res = await apiCall(\r\n          \"GET\",\r\n          `coupon?page=${page}&limit=${productLimit}`,\r\n          token\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          console.log({ res });\r\n          setCoupons(res?.data?.Data?.coupons);\r\n          setTotalCount(res?.data?.Data?.totalCount);\r\n        }\r\n        setIsCouponListLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setIsCouponListLoading(false);\r\n      }\r\n    };\r\n    fetchCoupons();\r\n  }, [triggerCouponCall, page]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    if (auth?.user?.role !== \"admin\" || auth?.user?.root === false) {\r\n      return toast.error(\"Unauthorized access.\");\r\n    }\r\n    const data = {\r\n      name: name,\r\n      expiry: expiryDate,\r\n      discount: discountValue,\r\n    };\r\n\r\n    try {\r\n      if (isEdit) {\r\n        const res = await apiCall(\r\n          \"PATCH\",\r\n          `coupon/${selectedCoupon?._id}`,\r\n          token,\r\n          data\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          setName(\"\");\r\n          setDiscountValue(0);\r\n          setExpiryDate(null);\r\n          toast.success(\"Coupon Updated.\");\r\n          setIsLoading(false);\r\n          setIsEdit(false);\r\n          setTriggerCouponCall(!triggerCouponCall);\r\n        }\r\n      } else {\r\n        const res = await apiCall(\"POST\", \"coupon\", token, data);\r\n        if (res?.data?.status === \"success\") {\r\n          setName(\"\");\r\n          setDiscountValue(0);\r\n          setExpiryDate(null);\r\n          toast.success(res?.data?.msg);\r\n          setIsLoading(false);\r\n          setTriggerCouponCall(!triggerCouponCall);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err || \"Something went wrong.\");\r\n      setIsLoading(false);\r\n      setIsEdit(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (coupon) => {\r\n    try {\r\n      const res = await apiCall(\"DELETE\", `coupon/${coupon?._id}`, token);\r\n      if (res?.data?.status === \"success\") {\r\n        toast.success(\"Coupon deleted.\");\r\n        setTriggerCouponCall(!triggerCouponCall);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  const handleEdit = (coupon) => {\r\n    console.log({ coupon });\r\n    setSelectedCoupon(coupon);\r\n    setIsEdit(true);\r\n    setName(coupon?.name);\r\n    setDiscountValue(coupon?.discount);\r\n    setExpiryDate(new Date(coupon?.expiry));\r\n  };\r\n  console.log({ expiryDate });\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <CustomTabs isAdminTabs={true} active={\"Coupons\"}>\r\n          <Grid container columnSpacing={3}>\r\n            <Grid item xs={12} sm={12} md={4}>\r\n              <BoxShadowWrapper\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"18px\" }}>\r\n                  {\" \"}\r\n                  Enter Coupon Details\r\n                </Typography>\r\n                <CustomInputBox\r\n                  id={\"name\"}\r\n                  label={\"Coupon Code\"}\r\n                  name={\"name\"}\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  errorValue={error?.name}\r\n                  inputStyle={{\r\n                    width: \"100%\",\r\n                    marginLeft: \"auto\",\r\n                    marginRight: \"auto\",\r\n                  }}\r\n                  required={true}\r\n                />\r\n                <CustomInputBox\r\n                  id={\"discountValue\"}\r\n                  label={\"Discount in rupees\"}\r\n                  name={\"discountValue\"}\r\n                  value={discountValue}\r\n                  onChange={(e) => setDiscountValue(e.target.value)}\r\n                  errorValue={error?.discountValue}\r\n                  inputStyle={{\r\n                    width: \"100%\",\r\n                    marginLeft: \"auto\",\r\n                    marginRight: \"auto\",\r\n                  }}\r\n                  required={true}\r\n                  type=\"number\"\r\n                />\r\n                <DatePickerComponent\r\n                  dateRange={expiryDate}\r\n                  setDateRange={setExpiryDate}\r\n                  labelProp=\"Select Expiry Date\"\r\n                />\r\n\r\n                {isLoading ? (\r\n                  <CircularProgress\r\n                    sx={{\r\n                      color: \"#539165\",\r\n                      marginLeft: \"auto\",\r\n                      marginRight: \"auto\",\r\n                    }}\r\n                    size={25}\r\n                  />\r\n                ) : (\r\n                  <Button\r\n                    onClick={handleSubmit}\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                      width: \"100%\",\r\n                      mt: 2,\r\n                      mb: 2,\r\n                      background: \"#539165\",\r\n                      \"&:hover\": { background: \"#539165\" },\r\n                      borderRadius: \"30px\",\r\n                      height: \"40px\",\r\n                    }}\r\n                    disabled={!expiryDate || !name}\r\n                  >\r\n                    {isEdit ? \"Edit\" : \"Add\"}\r\n                  </Button>\r\n                )}\r\n              </BoxShadowWrapper>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12} md={8}>\r\n              <BoxShadowWrapper\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"18px\" }}>Coupon Codes</Typography>\r\n                {coupons?.length === 0 && (\r\n                  <Typography sx={{ fontSize: \"18px\", marginTop: \"10px\" }}>\r\n                    No Coupon Codes Found. May be add a new one?\r\n                  </Typography>\r\n                )}\r\n\r\n                {isCouponListLoading ? (\r\n                  <CircularProgress\r\n                    sx={{\r\n                      color: \"#539165\",\r\n                      mt: 3,\r\n                      mb: 2,\r\n                    }}\r\n                    size={25}\r\n                  />\r\n                ) : (\r\n                  coupons?.map((category) => (\r\n                    <CategoryCard\r\n                      key={category?._id}\r\n                      card={category}\r\n                      setName={setName}\r\n                      setIsEdit={setIsEdit}\r\n                      setSelectedValue={setSelectedCoupon}\r\n                      setTriggerValueCall={setTriggerCouponCall}\r\n                      triggerValueCall={triggerCouponCall}\r\n                      handleDelete={handleDelete}\r\n                      handleEdit={handleEdit}\r\n                      modalMessage={\r\n                        \"Are you sure that you want to delete this coupon?\"\r\n                      }\r\n                      type=\"coupon\"\r\n                    />\r\n                  ))\r\n                )}\r\n                {totalCount > 10 && (\r\n                  <PaginationComponent\r\n                    page={page}\r\n                    setPage={setPage}\r\n                    count={Math.ceil(totalCount / productLimit)}\r\n                  />\r\n                )}\r\n              </BoxShadowWrapper>\r\n            </Grid>\r\n          </Grid>\r\n        </CustomTabs>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Coupon;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\index.js",["550","551","552"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"../../../store/GlobalState\";\r\nimport { useRouter } from \"next/router\";\r\nimport { Box, CircularProgress, Grid, Paper, Typography } from \"@mui/material\";\r\nimport Wrapper from \"../../../components/Wrapper/Wrapper\";\r\nimport CustomTabs from \"../../../components/CustomTabs/CustomTabs\";\r\nimport BoxShadowWrapper from \"../../../components/BoxShadowWrapper\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport useWindowSize from \"../../../hooks/useWindowSize\";\r\n// import LineChart from \"../../../components/LineChart/LineChart\";\r\nimport LineChartComponent from \"../../../components/LineChart/LineChart\";\r\n// import SwipeableViews from \"react-swipeable-views\";\r\n\r\nconst AdminCommerceDetailsBox = ({ title, value, link, image }) => {\r\n  const { width } = useWindowSize();\r\n  return (\r\n    <Grid item xs={6} sm={4} md={2.3}>\r\n      <BoxShadowWrapper\r\n        style={{\r\n          display: \"flex\",\r\n          // alignItems: \"center\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Box>\r\n          <Typography sx={{ fontSize: \"28px\", color: \"crimson\" }}>\r\n            {value}\r\n          </Typography>\r\n          <Typography sx={{ fontSize: \"17px\", fontWeight: 500 }}>\r\n            {title}\r\n          </Typography>\r\n\r\n          <Typography\r\n            sx={{\r\n              fontSize: \"14px\",\r\n              textDecoration: \"underline\",\r\n              marginTop: \"3px\",\r\n              color: \"blue\",\r\n            }}\r\n          >\r\n            {link}\r\n          </Typography>\r\n        </Box>\r\n        {width > 767 && (\r\n          <Paper sx={{ width: \"85px\", padding: \"2px\" }}>\r\n            <img\r\n              src={image}\r\n              style={{\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                objectFit: \"cover\",\r\n                borderRadius: \"8px\",\r\n              }}\r\n              alt={title}\r\n            />\r\n          </Paper>\r\n        )}\r\n      </BoxShadowWrapper>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nfunction AdminDashboard() {\r\n  const [loading, setLoading] = useState(false);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const router = useRouter();\r\n  const { auth } = state;\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [dashboardData, setDashboardData] = useState([]);\r\n  const [salesData, setSalesData] = useState([]);\r\n\r\n  const [dateRange, setDateRange] = useState([null, null]);\r\n  const [startDate, endDate] = dateRange;\r\n  const [dashboardDataLoading, setDashboardDataLoading] = useState(false);\r\n  const [salesDataLoading, setSalesDataLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchDashboardData = async () => {\r\n      setDashboardDataLoading(true);\r\n      try {\r\n        const res = await apiCall(\"GET\", \"dashboard\", token);\r\n        if (res?.data?.status === \"success\") {\r\n          setDashboardData(res?.data?.Data);\r\n        }\r\n        setDashboardDataLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.data?.response?.msg);\r\n        setDashboardDataLoading(false);\r\n      }\r\n    };\r\n    fetchDashboardData();\r\n  }, []);\r\n\r\n  const dateComparison = (dateA, dateB) => {\r\n    const firstDate = new Date(dateA);\r\n    const secondDate = new Date(dateB);\r\n    let data = {};\r\n    if (firstDate > secondDate) {\r\n      data = {\r\n        startDate: secondDate,\r\n        endDate: firstDate,\r\n      };\r\n    } else {\r\n      data = {\r\n        startDate: firstDate,\r\n        endDate: secondDate,\r\n      };\r\n    }\r\n    return data;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchSalesData = async () => {\r\n      try {\r\n        setSalesDataLoading(true);\r\n        const dateComparisonResult = dateComparison(\r\n          Date.now() - 7 * 24 * 60 * 60 * 1000,\r\n          Date.now()\r\n        );\r\n        const data = {\r\n          startDate: dateComparisonResult?.startDate,\r\n          endDate: dateComparisonResult?.endDate,\r\n        };\r\n        const res = await apiCall(\"POST\", \"salesData\", token, data);\r\n        if (res?.data?.status === \"success\") {\r\n          setSalesData(res?.data?.Data);\r\n        }\r\n        setSalesDataLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setSalesDataLoading(false);\r\n      }\r\n    };\r\n    fetchSalesData();\r\n  }, []);\r\n\r\n  const handleDateFilter = async (startDate, endDate) => {\r\n    try {\r\n      setSalesDataLoading(true);\r\n      const dateComparisonResult = dateComparison(startDate, endDate);\r\n      const data = {\r\n        startDate: dateComparisonResult?.startDate,\r\n        endDate: dateComparisonResult?.endDate,\r\n      };\r\n      const res = await apiCall(\"POST\", \"salesData\", token, data);\r\n      if (res?.data?.status === \"success\") {\r\n        setSalesData(res?.data?.Data);\r\n      }\r\n      setSalesDataLoading(false);\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setSalesDataLoading(false);\r\n    }\r\n  };\r\n\r\n  if (auth?.user?.role === \"user\") {\r\n    return <Typography>Unauthorized access</Typography>;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <CustomTabs isAdminTabs={true} active={\"Dashboard\"}>\r\n          {dashboardDataLoading ? (\r\n            <CircularProgress\r\n              sx={{\r\n                color: \"#539165\",\r\n                marginLeft: \"50%\",\r\n                mt: 3,\r\n                mb: 2,\r\n              }}\r\n              size={32}\r\n            />\r\n          ) : (\r\n            <Grid container columnSpacing={5} height={\"100%\"}>\r\n              <AdminCommerceDetailsBox\r\n                title={\"Items Sold\"}\r\n                value={dashboardData?.ordersCount}\r\n                link={\"View All\"}\r\n                image={\r\n                  \"https://media.istockphoto.com/id/539953664/photo/business-success-with-growing-rising-charts-and-businessman-in-background.jpg?s=612x612&w=0&k=20&c=s9ownrOZkwgHwZdr9AQqPpfMxwh-KwRZZxPnXbECQUo=\"\r\n                }\r\n              />\r\n              <AdminCommerceDetailsBox\r\n                title={\"Revenue\"}\r\n                value={`₹ ${dashboardData?.ordersPrice}`}\r\n                link={\"View All\"}\r\n                image={\r\n                  \"https://media.istockphoto.com/id/539953664/photo/business-success-with-growing-rising-charts-and-businessman-in-background.jpg?s=612x612&w=0&k=20&c=s9ownrOZkwgHwZdr9AQqPpfMxwh-KwRZZxPnXbECQUo=\"\r\n                }\r\n              />\r\n              <AdminCommerceDetailsBox\r\n                title={\"Products\"}\r\n                value={dashboardData?.productsCount}\r\n                link={\"View All\"}\r\n                image={\r\n                  \"https://media.istockphoto.com/id/539953664/photo/business-success-with-growing-rising-charts-and-businessman-in-background.jpg?s=612x612&w=0&k=20&c=s9ownrOZkwgHwZdr9AQqPpfMxwh-KwRZZxPnXbECQUo=\"\r\n                }\r\n              />\r\n              <AdminCommerceDetailsBox\r\n                title={\"Users\"}\r\n                value={dashboardData?.usersCount}\r\n                link={\"View All\"}\r\n                image={\r\n                  \"https://media.istockphoto.com/id/539953664/photo/business-success-with-growing-rising-charts-and-businessman-in-background.jpg?s=612x612&w=0&k=20&c=s9ownrOZkwgHwZdr9AQqPpfMxwh-KwRZZxPnXbECQUo=\"\r\n                }\r\n              />\r\n              <AdminCommerceDetailsBox\r\n                title={\"On Sale\"}\r\n                value={5}\r\n                link={\"View All\"}\r\n                image={\r\n                  \"https://media.istockphoto.com/id/539953664/photo/business-success-with-growing-rising-charts-and-businessman-in-background.jpg?s=612x612&w=0&k=20&c=s9ownrOZkwgHwZdr9AQqPpfMxwh-KwRZZxPnXbECQUo=\"\r\n                }\r\n              />\r\n            </Grid>\r\n          )}\r\n\r\n          <LineChartComponent\r\n            data={salesData}\r\n            title={\"Daily Revenue Analytics\"}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            dateRange={dateRange}\r\n            setDateRange={setDateRange}\r\n            handleDateSelect={handleDateFilter}\r\n            salesDataLoading={salesDataLoading}\r\n          />\r\n        </CustomTabs>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default AdminDashboard;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\orders\\index.js",["553"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport CustomTabs from \"../../../../components/CustomTabs/CustomTabs\";\r\nimport Wrapper from \"../../../../components/Wrapper/Wrapper\";\r\nimport { Box, Button } from \"@mui/material\";\r\nimport Demo from \"../../../../components/Demo\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport TableComponent from \"../../../../components/TableComponent/TableComponent\";\r\nimport BoxShadowWrapper from \"../../../../components/BoxShadowWrapper\";\r\nimport { useRouter } from \"next/router\";\r\nimport { DataContext } from \"../../../../store/GlobalState\";\r\nimport { toast } from \"react-toastify\";\r\nimport PaginationComponent from \"../../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction Orders() {\r\n  const router = useRouter();\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [orders, setOrders] = useState([]);\r\n  const [ordersTableData, setOrdersTableData] = useState([]);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchOrders = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await apiCall(\r\n          \"GET\",\r\n          `order?page=${page}&limit=${productLimit}`,\r\n          token\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          setTotalCount(res?.data?.Data?.totalCount);\r\n          const formattedData = res?.data?.Data?.orders?.map((order) => {\r\n            return {\r\n              firstCol: order?._id,\r\n              secondCol: order?.user?.name,\r\n\r\n              thirdCol: new Date(order?.createdAt).toLocaleDateString(),\r\n\r\n              fourthCol: `₹ ${order?.total}`,\r\n              fifthCol: order?.delivered?.toString(),\r\n\r\n              sixthCol: order?.payment_status?.toString(),\r\n              sevnthCol: (\r\n                <Button onClick={() => handleTableCellClick(order?._id)}>\r\n                  Details\r\n                </Button>\r\n              ),\r\n            };\r\n          });\r\n          setOrdersTableData(formattedData);\r\n          setOrders(res?.data?.Data);\r\n        }\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.msg);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchOrders();\r\n  }, [page]);\r\n\r\n  const tableHeadings = [\r\n    \"Order Id\",\r\n    \"User\",\r\n    \"Date\",\r\n    \"Total\",\r\n    \"Delivered\",\r\n    \"Paid\",\r\n    \"Action\",\r\n  ];\r\n\r\n  const handleTableCellClick = (orderId) => {\r\n    router.push(`/order/${orderId}`);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <CustomTabs isAdminTabs={true} active={\"Orders\"}>\r\n          <BoxShadowWrapper>\r\n            <TableComponent\r\n              title={\"Order Items\"}\r\n              // tableHeadings={[]}\r\n              tableHeadingsStyle={{ fontSize: \"18px\" }}\r\n              imageContainerStyle={{\r\n                width: \"80px\",\r\n                height: \"80px\",\r\n                objectFit: \"cover\",\r\n              }}\r\n              imageStyle={{ height: \"100%\", width: \"100%\", flex: 1 }}\r\n              tableBodyStyle={{ fontSize: \"18px\" }}\r\n              tableBodyData={ordersTableData}\r\n              tableHeadings={tableHeadings}\r\n              isAdmin={true}\r\n              type={\"orders\"}\r\n              handleTableCellClick={handleTableCellClick}\r\n              align={\"center\"}\r\n              loadingState={isLoading}\r\n            />\r\n            {totalCount > 10 && (\r\n              <PaginationComponent\r\n                page={page}\r\n                setPage={setPage}\r\n                count={Math.ceil(totalCount / productLimit)}\r\n              />\r\n            )}\r\n          </BoxShadowWrapper>\r\n        </CustomTabs>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Orders;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\products\\create.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\products\\edit\\[id].js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\products\\index.js",["554"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport CustomTabs from \"../../../../components/CustomTabs/CustomTabs\";\r\nimport Wrapper from \"../../../../components/Wrapper/Wrapper\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport BoxShadowWrapper from \"../../../../components/BoxShadowWrapper\";\r\nimport CustomInputBox from \"../../../../components/CustomInputBox/CustomInputBox\";\r\nimport Dropdown from \"../../../../components/Dropdown/Dropdown\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { imageUpload } from \"@/utils/imageUpload\";\r\nimport { useRouter } from \"next/router\";\r\nimport { DataContext } from \"../../../../store/GlobalState\";\r\nimport TableComponent from \"../../../../components/TableComponent/TableComponent\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport ModeEditIcon from \"@mui/icons-material/ModeEdit\";\r\nimport CustomModal from \"../../../../components/Modal/CustomModal\";\r\nimport PaginationComponent from \"../../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction Products() {\r\n  const router = useRouter();\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [products, setProducts] = useState([]);\r\n  const [productsTableData, setProductsTableData] = useState([]);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false);\r\n  const [productCallTrigger, setProductCallTrigger] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const res = await apiCall(\r\n          \"GET\",\r\n          `product?page=${page}&limit=${productLimit}`\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          setTotalCount(res?.data?.totalCount);\r\n          const formattedData = res?.data?.Data?.map((product) => {\r\n            return {\r\n              firstCol: product?.images?.[0]?.url,\r\n              secondCol: product?.title,\r\n\r\n              thirdCol: new Date(product?.updatedAt).toLocaleDateString(),\r\n\r\n              fourthCol: `₹ ${product.price}`,\r\n              fifthCol: product.sold,\r\n\r\n              sixthCol: product.inStock,\r\n              sevnthCol: (\r\n                <Box>\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      handleDeleteModalOpen();\r\n                      handleButtonClick(product);\r\n                    }}\r\n                    // disabled={user?.root === true}\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      // handleClickOpen();\r\n                      // handleButtonClick(product);\r\n                      router.push(\r\n                        `/adminDashboard/products/edit/${product?._id}`\r\n                      );\r\n                    }}\r\n                    // disabled={user?.root === true}\r\n                  >\r\n                    <ModeEditIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              ),\r\n            };\r\n          });\r\n\r\n          setProductsTableData(formattedData);\r\n          setProducts(res?.data?.Data);\r\n        }\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchProducts();\r\n  }, [productCallTrigger, page]);\r\n\r\n  const tableHeadings = [\r\n    \"Image\",\r\n    \"Title\",\r\n    \"Updated on\",\r\n    \"Price\",\r\n    \"Sold\",\r\n    \"Available Stock\",\r\n    \"Action\",\r\n  ];\r\n  const handleButtonClick = (prod) => {\r\n    setSelectedProduct({\r\n      id: prod?._id,\r\n    });\r\n  };\r\n\r\n  const handleProductDelete = async () => {\r\n    try {\r\n      const res = await apiCall(\r\n        \"DELETE\",\r\n        `product/${selectedProduct?.id}`,\r\n        token\r\n      );\r\n      if (res?.data?.status === \"success\") {\r\n        // setRoleUpdateCallTriggered(!roleUpdateCallTriggered);\r\n        setProductCallTrigger(!productCallTrigger);\r\n        toast.success(\"Product deleted!\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  const handleDeleteModalOpen = () => {\r\n    setDeleteModalOpen(true);\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <CustomTabs isAdminTabs={true} active={\"Products\"}>\r\n          <BoxShadowWrapper>\r\n            <TableComponent\r\n              title={\"Products\"}\r\n              // tableHeadings={[]}\r\n              tableHeadingsStyle={{ fontSize: \"18px\" }}\r\n              imageContainerStyle={{\r\n                width: \"80px\",\r\n                height: \"80px\",\r\n                objectFit: \"cover\",\r\n              }}\r\n              imageStyle={{ height: \"100%\", width: \"100%\", flex: 1 }}\r\n              tableBodyStyle={{ fontSize: \"18px\" }}\r\n              tableBodyData={productsTableData}\r\n              tableHeadings={tableHeadings}\r\n              isAdmin={true}\r\n              type={\"products\"}\r\n              // handleTableCellClick={handleTableCellClick}\r\n              align={\"center\"}\r\n              isImage={true}\r\n              headerButtonClick={() =>\r\n                router.push(\"/adminDashboard/products/create\")\r\n              }\r\n              loadingState={isLoading}\r\n            />\r\n            {totalCount > 10 && (\r\n              <PaginationComponent\r\n                page={page}\r\n                setPage={setPage}\r\n                count={Math.ceil(totalCount / productLimit)}\r\n              />\r\n            )}\r\n            <CustomModal\r\n              open={deleteModalOpen}\r\n              setOpen={setDeleteModalOpen}\r\n              modalTitle={\"Delete Product?\"}\r\n              agreedButtonName={\"Delete\"}\r\n              declineButtonName={\"Cancel\"}\r\n              handleAgreedButtonClick={handleProductDelete}\r\n              agreedButtonColor={\"#539165\"}\r\n              declineButtonColor={\"red\"}\r\n              showAgreedButton={true}\r\n              showDeclineButton={true}\r\n            >\r\n              <Typography>\r\n                Are you sure that you want to delete this user?\r\n              </Typography>\r\n            </CustomModal>\r\n          </BoxShadowWrapper>\r\n        </CustomTabs>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Products;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\adminDashboard\\users\\index.js",["555","556"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport CustomTabs from \"../../../../components/CustomTabs/CustomTabs\";\r\nimport Wrapper from \"../../../../components/Wrapper/Wrapper\";\r\nimport {\r\n  Box,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  IconButton,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport BoxShadowWrapper from \"../../../../components/BoxShadowWrapper\";\r\nimport TableComponent from \"../../../../components/TableComponent/TableComponent\";\r\nimport { useRouter } from \"next/router\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport CustomModal from \"../../../../components/Modal/CustomModal\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport ModeEditIcon from \"@mui/icons-material/ModeEdit\";\r\nimport CustomInputBox from \"../../../../components/CustomInputBox/CustomInputBox\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DataContext } from \"../../../../store/GlobalState\";\r\nimport PaginationComponent from \"../../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction Users() {\r\n  const { state } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const tableHeadings = [\"Id\", \"Name\", \"Email\", \"Admin\", \"Actions\"];\r\n  const [open, setOpen] = React.useState(false);\r\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false);\r\n  const router = useRouter();\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const [users, setUsers] = useState([]);\r\n  const [roleUpdateCallTriggered, setRoleUpdateCallTriggered] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [usersTableData, setUsersTableData] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState({\r\n    name: \"\",\r\n    isAdmin: false,\r\n    id: \"\",\r\n  });\r\n  const [checked, setChecked] = React.useState(true);\r\n\r\n  const handleChange = (event) => {\r\n    setChecked(event.target.checked);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const res = await apiCall(\r\n          \"GET\",\r\n          `user?page=${page}&limit=${productLimit}`,\r\n          token\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          setTotalCount(res?.data?.Data?.totalCount);\r\n          const formattedData = res?.data?.Data?.users?.map((user) => {\r\n            return {\r\n              firstCol: user?._id,\r\n              secondCol: user?.name,\r\n\r\n              thirdCol: user?.email,\r\n\r\n              fourthCol:\r\n                user?.root === true\r\n                  ? \"Root\"\r\n                  : user?.role === \"admin\"\r\n                  ? \"Admin\"\r\n                  : \"User\",\r\n              fifthCol: (\r\n                <Box>\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      handleDeleteModalOpen();\r\n                      handleButtonClick(user);\r\n                    }}\r\n                    disabled={user?.root === true}\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                  <IconButton\r\n                    onClick={() => {\r\n                      handleClickOpen();\r\n                      handleButtonClick(user);\r\n                    }}\r\n                    disabled={user?.root === true}\r\n                  >\r\n                    <ModeEditIcon />\r\n                  </IconButton>\r\n                </Box>\r\n              ),\r\n            };\r\n          });\r\n          setUsersTableData(formattedData);\r\n          setUsers(res?.data?.Data);\r\n        }\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.msg);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchUsers();\r\n  }, [roleUpdateCallTriggered, page]);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleButtonClick = (userData) => {\r\n    setSelectedUser({\r\n      name: userData?.name,\r\n      isAdmin: userData?.role === \"admin\" ? true : false,\r\n      id: userData?._id,\r\n    });\r\n  };\r\n\r\n  const handleDeleteModalOpen = () => {\r\n    setDeleteModalOpen(true);\r\n  };\r\n\r\n  const handleUserUpdate = async (e) => {\r\n    const data = {\r\n      userId: selectedUser?.id,\r\n      role: selectedUser?.isAdmin === true ? \"admin\" : \"user\",\r\n      name: selectedUser?.name,\r\n    };\r\n    try {\r\n      const res = await apiCall(\r\n        \"PATCH\",\r\n        `user/${selectedUser?.id}`,\r\n        token,\r\n        data\r\n      );\r\n      if (res?.data?.status === \"success\") {\r\n        setRoleUpdateCallTriggered(!roleUpdateCallTriggered);\r\n        toast.success(\"User updated!\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  const handleUserDelete = async () => {\r\n    try {\r\n      const res = await apiCall(\"DELETE\", `user/${selectedUser?.id}`, token);\r\n      if (res?.data?.status === \"success\") {\r\n        setRoleUpdateCallTriggered(!roleUpdateCallTriggered);\r\n        toast.success(\"User deleted!\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (auth?.user?.role === \"user\") {\r\n      router.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <CustomTabs isAdminTabs={true} active={\"Users\"}>\r\n          <BoxShadowWrapper>\r\n            <TableComponent\r\n              title={\"Users\"}\r\n              // tableHeadings={[]}\r\n              tableHeadingsStyle={{ fontSize: \"18px\" }}\r\n              imageContainerStyle={{\r\n                width: \"80px\",\r\n                height: \"80px\",\r\n                objectFit: \"cover\",\r\n              }}\r\n              imageStyle={{ height: \"100%\", width: \"100%\", flex: 1 }}\r\n              tableBodyStyle={{ fontSize: \"18px\" }}\r\n              tableBodyData={usersTableData}\r\n              tableHeadings={tableHeadings}\r\n              isAdmin={true}\r\n              type={\"users\"}\r\n              handleTableCellClick={() => {}}\r\n              align={\"center\"}\r\n              handleEditCellClick={handleClickOpen}\r\n              loadingState={isLoading}\r\n              // handleDeleteCellClick={handleDeleteModalOpen}\r\n            />\r\n            {totalCount > 10 && (\r\n              <PaginationComponent\r\n                page={page}\r\n                setPage={setPage}\r\n                count={Math.ceil(totalCount / productLimit)}\r\n              />\r\n            )}\r\n          </BoxShadowWrapper>\r\n          <CustomModal\r\n            open={open}\r\n            setOpen={setOpen}\r\n            modalTitle={\"User Details\"}\r\n            agreedButtonName={\"Update\"}\r\n            declineButtonName={\"Cancel\"}\r\n            handleAgreedButtonClick={handleUserUpdate}\r\n            showAgreedButton={true}\r\n            showDeclineButton={true}\r\n          >\r\n            <CustomInputBox\r\n              id={\"name\"}\r\n              label={\"Name\"}\r\n              name={\"name\"}\r\n              value={selectedUser?.name}\r\n              onChange={(e) =>\r\n                setSelectedUser({ ...selectedUser, name: e.target.value })\r\n              }\r\n              // errorValue={error?.name}\r\n              inputStyle={{\r\n                width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n              }}\r\n              required={true}\r\n              agreedButtonColor={\"#539165\"}\r\n              declineButtonColor={\"red\"}\r\n            />\r\n            <FormControlLabel\r\n              control={\r\n                <Checkbox\r\n                  checked={selectedUser?.isAdmin}\r\n                  onChange={(e) =>\r\n                    setSelectedUser({\r\n                      ...selectedUser,\r\n                      isAdmin: !selectedUser?.isAdmin,\r\n                    })\r\n                  }\r\n                  inputProps={{ \"aria-label\": \"controlled\" }}\r\n                />\r\n              }\r\n              label=\"Admin\"\r\n            />\r\n          </CustomModal>\r\n          <CustomModal\r\n            open={deleteModalOpen}\r\n            setOpen={setDeleteModalOpen}\r\n            modalTitle={\"Delete User?\"}\r\n            agreedButtonName={\"Delete\"}\r\n            declineButtonName={\"Cancel\"}\r\n            handleAgreedButtonClick={handleUserDelete}\r\n            agreedButtonColor={\"#539165\"}\r\n            declineButtonColor={\"red\"}\r\n            showAgreedButton={true}\r\n            showDeclineButton={true}\r\n          >\r\n            <Typography>\r\n              Are you sure that you want to delete this user?\r\n            </Typography>\r\n          </CustomModal>\r\n        </CustomTabs>\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\address\\index.js",["557"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Address from \"../../../models/addressModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await addAddress(req, res);\r\n      break;\r\n    case \"GET\":\r\n      await getAddress(req, res);\r\n      break;\r\n    case \"PUT\":\r\n      await updateAddress(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst addAddress = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n\r\n    const { userId, name, address1, address2, city, state, phone } = req.body;\r\n    const user = await Address.find({ userId: result.id });\r\n    if (user?.length > 0) {\r\n      return res.status(400).json({\r\n        err: \"Address for this user already exist. Try to edit the existing one.\",\r\n      });\r\n    }\r\n    const newAddress = new Address({\r\n      userId: result.id,\r\n      name,\r\n      address1,\r\n      address2,\r\n      city,\r\n      state,\r\n      phone,\r\n    });\r\n    await newAddress.save();\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: newAddress,\r\n    });\r\n  } catch (error) {\r\n    return res?.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst getAddress = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n\r\n    const address = await Address.find({ userId: result.id });\r\n    if (!address) {\r\n      return res.status(400).json({ err: \"No address found!\" });\r\n    }\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: address,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst updateAddress = async (req, res) => {\r\n  try {\r\n    const { name, address1, address2, city, state, phone } = req.body;\r\n    const result = await auth(req, res);\r\n\r\n    const address = await Address.findOneAndUpdate(\r\n      { userId: result.id },\r\n      {\r\n        name,\r\n        address1,\r\n        address2,\r\n        city,\r\n        state,\r\n        phone,\r\n        userId: result.id,\r\n      }\r\n    );\r\n    if (!address) {\r\n      return res.status(400).json({ err: \"No address found!\" });\r\n    }\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: address,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\auth\\login.js",["558"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Users from \"../../../models/userModel\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await login(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n    const decryptPassword = CryptoJS.AES.decrypt(password, \"secret key 1\");\r\n    const stringedPassword = decryptPassword.toString(CryptoJS.enc.Utf8);\r\n    const user = await Users.findOne({ email });\r\n    if (!user) {\r\n      return res.status(400).json({ err: \"User does not exist.\" });\r\n    }\r\n    const isMatch = await bcrypt.compare(stringedPassword, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ err: \"Invalid Password!\" });\r\n    }\r\n    //if login is true\r\n    const payload = { id: user?._id, name: user?.name };\r\n    const token = jwt.sign(payload, process.env.TOKEN_SECRET, {\r\n      expiresIn: \"30d\",\r\n    });\r\n    res.json({\r\n      token,\r\n      msg: \"Login Success!\",\r\n      user: {\r\n        email: user?.email,\r\n        name: user?.name,\r\n        avatar: user?.avatar,\r\n        role: user?.role,\r\n        root: user?.root,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    return res?.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\auth\\register.js",["559"],[],"import connectDB from \"../../../utils/connectDB\";\r\nimport Users from \"../../../models/userModel\";\r\nimport bcrypt from \"bcrypt\";\r\nimport valid from \"../../../utils/valid\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await register(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst register = async (req, res) => {\r\n  try {\r\n    const { name, email, password, confirmPassword } = req.body;\r\n    const decryptedPassword = CryptoJS.AES.decrypt(\r\n      password,\r\n      \"secret key 1\"\r\n    ).toString(CryptoJS.enc.Utf8);\r\n    const decryptedConfirmPassword = CryptoJS.AES.decrypt(\r\n      confirmPassword,\r\n      \"secret key 1\"\r\n    ).toString(CryptoJS.enc.Utf8);\r\n\r\n    const errorMessage = valid(\r\n      name,\r\n      email,\r\n      decryptedPassword,\r\n      decryptedConfirmPassword\r\n    );\r\n    if (errorMessage) return res.status(400).json({ err: errorMessage });\r\n\r\n    const user = await Users.findOne({ email });\r\n    if (user)\r\n      return res.status(400).json({ err: \"This email already exists.\" });\r\n\r\n    const passwordHash = await bcrypt.hash(decryptedPassword, 12);\r\n    const newUser = new Users({\r\n      name,\r\n      email,\r\n      password: passwordHash,\r\n      confirmPassword: confirmPassword,\r\n    });\r\n    await newUser.save();\r\n    res.json({ msg: \"Register Success!\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\auth\\verify.js",["560"],[],"import connectDB from \"../../../utils/connectDB\";\r\nimport Users from \"../../../models/userModel\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await verify(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst verify = async (req, res) => {\r\n  try {\r\n    const token = req.headers[\"authorization\"];\r\n    if (!token)\r\n      return res\r\n        .status(400)\r\n        .json({ err: \"Invalid Signature\", verification: false });\r\n    jwt.verify(token, process.env.TOKEN_SECRET, async (err, verified) => {\r\n      if (err)\r\n        return res\r\n          .status(400)\r\n          .json({ err: \"Verification Failed\", verification: false });\r\n      const user = await Users.findById(verified.id);\r\n      if (!user) return res.status(400).json({ err: \"User not found\" });\r\n      return res.json({\r\n        msg: \"Verified\",\r\n        user: {\r\n          email: user?.email,\r\n          name: user?.name,\r\n          avatar: user?.avatar,\r\n          role: user?.role,\r\n          root: user?.root,\r\n          id: user?._id,\r\n        },\r\n        verification: true,\r\n      });\r\n    });\r\n  } catch (error) {\r\n    res.end();\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\cart\\guest\\[id].js",["561"],[],"import connectDB from \"@/utils/connectDB\";\r\n\r\nimport Cart from \"../../../../models/cartModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getCartForGuest(req, res);\r\n      break;\r\n    case \"PATCH\":\r\n      await decreaseQuantityForGuest(req, res);\r\n      break;\r\n    case \"DELETE\":\r\n      await removeItemForGuest(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getCartForGuest = async (req, res) => {\r\n  try {\r\n    const { id } = req.query;\r\n\r\n    const cart = await Cart.find({ _id: id }).populate({\r\n      path: \"products\",\r\n      populate: {\r\n        path: \"productId\",\r\n        model: \"product\",\r\n      },\r\n    });\r\n    if (!cart) {\r\n      return res.json({ status: \"success\", msg: \"Nothing in the cart.\" });\r\n    }\r\n\r\n    const totalFormat = cart[0];\r\n\r\n    const totalAmount = totalFormat.products?.reduce(\r\n      (acc, curr) =>\r\n        curr?.productId?.discount > 0\r\n          ? acc + curr?.productId?.discountPrice * curr.quantity\r\n          : acc + curr?.productId?.price * curr?.quantity,\r\n      0\r\n    );\r\n\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: cart,\r\n      totalAmount: totalAmount,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst decreaseQuantityForGuest = async (req, res) => {\r\n  try {\r\n    const { cartId, products } = req.body;\r\n    let cart = await Cart.findOne({ _id: cartId });\r\n    if (cart) {\r\n      if (products?.length > 0) {\r\n        cart.products.forEach((obj) => {\r\n          const elementInArr2 = products.find(\r\n            (o) => o.productId === obj.productId.toString()\r\n          );\r\n          if (obj.quantity === 1) {\r\n            return res.status(400).json({\r\n              err: \"Cannot decrease the quantity of item. You can click on delete icon to remove it from the cart.\",\r\n            });\r\n          }\r\n          if (elementInArr2 && obj?.quantity > 1)\r\n            obj.quantity = obj.quantity - elementInArr2.quantity;\r\n        });\r\n        let unique1 = products.filter(\r\n          ({ productId: id1 }) =>\r\n            !cart.products.some(({ productId: id2 }) => id2.toString() === id1)\r\n        );\r\n\r\n        let final = [...cart.products, ...unique1];\r\n        cart[\"products\"] = final;\r\n        cart = await cart.save();\r\n        return res.status(201).json({ status: \"success\", Data: cart });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst removeItemForGuest = async (req, res) => {\r\n  try {\r\n    const { cartId, productId } = req.body;\r\n\r\n    let cart = await Cart.findOne({ _id: cartId });\r\n\r\n    if (!cart) {\r\n      return res\r\n        .status(400)\r\n        .json({ err: \"Cart does not exist for this user.\" });\r\n    }\r\n    if (!productId) {\r\n      return res.status(400).json({ err: \"This product does not exist.\" });\r\n    }\r\n    if (cart) {\r\n      if (productId) {\r\n        let finalCart = cart.products.filter(\r\n          (obj) => obj.productId.toString() !== productId\r\n        );\r\n\r\n        if (finalCart?.length === 0) {\r\n          await Cart.findOneAndDelete({ _id: cartId });\r\n          return res.json({ status: \"success\", msg: \"Cart Deleted\" });\r\n        }\r\n        cart[\"products\"] = finalCart;\r\n        cart = await cart.save();\r\n        return res.status(201).json({ status: \"success\", Data: cart });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\cart\\index.js",["562"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Cart from \"../../../models/cartModel\";\r\nimport Product from \"../../../models/productModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await addToCartForGuest(req, res);\r\n      break;\r\n    // case \"GET\":\r\n    //   await getCartForGuest(req, res);\r\n    //   break;\r\n  }\r\n};\r\n\r\nconst addToCartForGuest = async (req, res) => {\r\n  try {\r\n    const { cartId, products } = req.body;\r\n\r\n    let cart = await Cart.findOne({ _id: cartId });\r\n    if (cart) {\r\n      if (products?.length > 0) {\r\n        cart.products.forEach((obj) => {\r\n          const elementInArr2 = products.find(\r\n            (o) => o.productId === obj.productId.toString()\r\n          );\r\n\r\n          if (elementInArr2)\r\n            obj.quantity = obj.quantity + elementInArr2.quantity;\r\n        });\r\n        let unique1 = products.filter(\r\n          ({ productId: id1 }) =>\r\n            !cart.products.some(({ productId: id2 }) => id2.toString() === id1)\r\n        );\r\n\r\n        let final = [...cart.products, ...unique1];\r\n        cart[\"products\"] = final;\r\n\r\n        cart = await cart.save();\r\n        return res.status(201).json({ status: \"success\", Data: cart });\r\n      }\r\n    } else {\r\n      const newCart = await Cart.create({\r\n        products: products,\r\n      });\r\n      return res.status(201).json({ status: \"success\", Data: newCart });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\cart\\[id].js",["563"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Cart from \"../../../models/cartModel\";\r\nimport Product from \"../../../models/productModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await addToCartForLogged(req, res);\r\n      break;\r\n    case \"GET\":\r\n      await getCart(req, res);\r\n      break;\r\n    case \"PATCH\":\r\n      await decreaseQuantity(req, res);\r\n      break;\r\n    case \"DELETE\":\r\n      await removeItem(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst addToCartForLogged = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const products = req.body;\r\n\r\n    if (result.id) {\r\n      let cart = await Cart.findOne({ userId: result.id });\r\n      if (cart) {\r\n        if (products?.length > 0) {\r\n          cart.products.forEach((obj) => {\r\n            const elementInArr2 = products.find(\r\n              (o) => o.productId === obj.productId.toString()\r\n            );\r\n\r\n            if (elementInArr2)\r\n              obj.quantity = obj.quantity + elementInArr2.quantity;\r\n          });\r\n          let unique1 = products.filter(\r\n            ({ productId: id1 }) =>\r\n              !cart.products.some(\r\n                ({ productId: id2 }) => id2.toString() === id1\r\n              )\r\n          );\r\n\r\n          let final = [...cart.products, ...unique1];\r\n          cart[\"products\"] = final;\r\n\r\n          cart = await cart.save();\r\n          return res.status(201).json({ status: \"success\", Data: cart });\r\n        }\r\n      } else {\r\n        const newCart = await Cart.create({\r\n          userId: result.id,\r\n          products: products,\r\n        });\r\n        return res.status(201).json({ status: \"success\", Data: newCart });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst getCart = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result.id) {\r\n      const cart = await Cart.find({ userId: result.id }).populate({\r\n        path: \"products\",\r\n        populate: {\r\n          path: \"productId\",\r\n          model: \"product\",\r\n        },\r\n      });\r\n\r\n      if (cart?.length === 0) {\r\n        return res.json({ status: \"success\", msg: \"Nothing in the cart.\" });\r\n      }\r\n      const totalFormat = cart[0];\r\n\r\n      const totalAmount = totalFormat.products?.reduce(\r\n        (acc, curr) =>\r\n          curr?.productId?.discount > 0\r\n            ? acc + curr?.productId?.discountPrice * curr.quantity\r\n            : acc + curr?.productId?.price * curr?.quantity,\r\n        0\r\n      );\r\n\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: { cart, totalAmount },\r\n      });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst decreaseQuantity = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const products = req.body;\r\n    console.log({ products });\r\n    if (result.id) {\r\n      let cart = await Cart.findOne({ userId: result.id });\r\n      console.log({ cart });\r\n      if (cart) {\r\n        if (products?.length > 0) {\r\n          cart.products.forEach((obj) => {\r\n            const elementInArr2 = products.find(\r\n              (o) => o.productId === obj.productId.toString()\r\n            );\r\n\r\n            if (elementInArr2 && obj?.quantity > 1)\r\n              obj.quantity = obj.quantity - elementInArr2.quantity;\r\n          });\r\n          let unique1 = products.filter(\r\n            ({ productId: id1 }) =>\r\n              !cart.products.some(\r\n                ({ productId: id2 }) => id2.toString() === id1\r\n              )\r\n          );\r\n\r\n          let final = [...cart.products, ...unique1];\r\n          cart[\"products\"] = final;\r\n          cart = await cart.save();\r\n          return res.status(201).json({ status: \"success\", Data: cart });\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst removeItem = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { productId } = req.body;\r\n    if (result.id) {\r\n      let cart = await Cart.findOne({ userId: result.id });\r\n      if (!cart) {\r\n        return res\r\n          .status(400)\r\n          .json({ err: \"Cart does not exist for this user.\" });\r\n      }\r\n      if (!productId) {\r\n        return res.status(400).json({ err: \"This product does not exist.\" });\r\n      }\r\n      if (cart) {\r\n        if (productId) {\r\n          let finalCart = cart.products.filter(\r\n            (obj) => obj.productId.toString() !== productId\r\n          );\r\n\r\n          if (finalCart?.length === 0) {\r\n            await Cart.findOneAndDelete({ userId: result.id });\r\n            return res.json({ status: \"success\", msg: \"Cart Deleted\" });\r\n          }\r\n          cart[\"products\"] = finalCart;\r\n          cart = await cart.save();\r\n          return res.status(201).json({ status: \"success\", Data: cart });\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\category\\index.js",["564"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Categories from \"../../../models/categoryModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await createCategory(req, res);\r\n      break;\r\n    case \"GET\":\r\n      await getCategories(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst createCategory = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { name, image } = req.body;\r\n    if (result.role !== \"admin\" || result.root === false) {\r\n      return res.status(400).json({ err: \"Unauthorized access\" });\r\n    }\r\n    if (name?.length === 0 || image?.length === 0) {\r\n      return res.status(400).json({ err: \"Name and image is required\" });\r\n    }\r\n    const newCategory = new Categories({ name, image });\r\n    await newCategory.save();\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Category created successfully.\",\r\n      Data: newCategory,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst getCategories = async (req, res) => {\r\n  try {\r\n    let { page, limit } = req.query;\r\n    if (!page) page = 1;\r\n    if (!limit) limit = 10;\r\n\r\n    const skip = (page - 1) * limit;\r\n    const categories = await Categories.find()\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(limit);\r\n    const totalCount = await Categories.countDocuments();\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: { categories, totalCount },\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\category\\products\\[id].js",["565"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Categories from \"../../../../models/categoryModel\";\r\nimport Products from \"../../../../models/productModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getProductsFromCategory(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getProductsFromCategory = async (req, res) => {\r\n  try {\r\n    let { page, limit, id } = req.query;\r\n    if (!page) page = 1;\r\n    if (!limit) limit = 10;\r\n\r\n    const skip = (page - 1) * limit;\r\n    const query = [\r\n      {\r\n        $match: {\r\n          $or: [{ category: id }],\r\n        },\r\n      },\r\n      {\r\n        $facet: {\r\n          products: [\r\n            {\r\n              $skip: skip,\r\n            },\r\n            {\r\n              $limit: parseInt(limit),\r\n            },\r\n            {\r\n              $project: {\r\n                createdAt: 0,\r\n                updatedAt: 0,\r\n                __v: 0,\r\n              },\r\n            },\r\n          ],\r\n          count: [\r\n            {\r\n              $count: \"count\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          products: 1,\r\n          totalCount: {\r\n            $arrayElemAt: [\"$count\", 0],\r\n          },\r\n        },\r\n      },\r\n    ];\r\n    // const products = await Products.find({ category: id })\r\n    //   .sort({ createdAt: -1 })\r\n    //   .skip(skip)\r\n    //   .limit(limit);\r\n    const products = await Products.aggregate(query);\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: products,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\category\\[id].js",["566"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Categories from \"../../../models/categoryModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PATCH\":\r\n      await updateCategory(req, res);\r\n      break;\r\n    case \"DELETE\":\r\n      await deleteCategory(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst updateCategory = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { id } = req.query;\r\n    const { name, image } = req.body;\r\n    if (result.role !== \"admin\" || result.root === false) {\r\n      return res.status(400).json({ err: \"Unauthorized access\" });\r\n    }\r\n    if (name?.length === 0 || image?.length === 0) {\r\n      return res.status(400).json({ err: \"Name and image is required\" });\r\n    }\r\n    const updateCategory = await Categories.findOneAndUpdate(\r\n      { _id: id },\r\n      {\r\n        name,\r\n        image,\r\n      }\r\n    );\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: updateCategory,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst deleteCategory = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { id } = req.query;\r\n    if (result.role !== \"admin\" || result.root === false) {\r\n      return res.status(400).json({ err: \"Unauthorized access\" });\r\n    }\r\n\r\n    const deleteCategory = await Categories.findOneAndDelete({ _id: id });\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Category Deleted.\",\r\n      Data: deleteCategory,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\checkout_sessions.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\applyCoupon\\index.js",["567"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport auth from \"../../../../../middleware/auth\";\r\nimport Coupon from \"../../../../models/couponModel\";\r\nimport Cart from \"../../../../models/cartModel\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PUT\":\r\n      await applyCoupon(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst applyCoupon = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n\r\n    const { name, isApplied } = req.body;\r\n    const { type } = req.query;\r\n\r\n    const isExist = await Coupon.findOne({ name: name });\r\n    if (!isExist) {\r\n      return res.status(400).json({ err: \"Coupon does not exist\" });\r\n    }\r\n\r\n    // if (isExist.expiry < new Date(Date.now())) {\r\n    //   return res.status(400).json({ err: \"Coupon is expired.\" });\r\n    // }\r\n    const isCouponAlreadyUsed = isExist.users.find(\r\n      (user) => user.toString() === result.id.toString()\r\n    );\r\n    // if (isCouponAlreadyUsed) {\r\n    //   return res.status(400).json({ err: \"This coupon code is already used.\" });\r\n    // }\r\n\r\n    const userCart = await Cart.findOne({ userId: result.id }).populate({\r\n      path: \"products\",\r\n      populate: {\r\n        path: \"productId\",\r\n        model: \"product\",\r\n      },\r\n    });\r\n    if (!userCart) {\r\n      return res.status(400).json({ err: \"No cart found\" });\r\n    }\r\n\r\n    // const totalAmount = userCart.products?.reduce(\r\n    //   (acc, curr) =>\r\n    //     curr?.productId?.discount > 0\r\n    //       ? acc + curr?.productId?.discountPrice * curr.quantity\r\n    //       : acc + curr?.productId?.price * curr?.quantity,\r\n    //   0\r\n    // );\r\n\r\n    await Cart.findOneAndUpdate(\r\n      { userId: result.id },\r\n      {\r\n        discount: isExist.discount,\r\n        couponCode: isExist.name,\r\n      }\r\n    );\r\n\r\n    const coupon = await isExist.updateOne({ users: result.id });\r\n\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: userCart?.couponCode === name ? \"Coupon Removed\" : \"Coupon applied\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\index.js",["568"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Coupon from \"../../../models/couponModel\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await createCoupon(req, res);\r\n      break;\r\n    case \"GET\":\r\n      await getCoupons(req, res);\r\n  }\r\n};\r\n\r\nconst createCoupon = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { name, expiry, discount } = req.body;\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      const isExist = await Coupon.findOne({ name: name });\r\n      if (isExist) {\r\n        return res\r\n          .status(400)\r\n          .json({ err: \"Coupon of this name already exist.\" });\r\n      }\r\n      const newCoupon = await Coupon.create({ name, expiry, discount });\r\n\r\n      return res.json({ status: \"success\", Data: newCoupon });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst getCoupons = async (req, res) => {\r\n  try {\r\n    let { page, limit } = req.query;\r\n    if (!page) page = 1;\r\n    if (!limit) limit = 10;\r\n\r\n    const skip = (page - 1) * limit;\r\n    const result = await auth(req, res);\r\n    console.log({ result });\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      const couponCount = await Coupon.countDocuments();\r\n      const coupons = await Coupon.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit);\r\n\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: {\r\n          coupons,\r\n          totalCount: couponCount,\r\n        },\r\n      });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\removeCoupon\\index.js",["569"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport auth from \"../../../../../middleware/auth\";\r\nimport Coupon from \"../../../../models/couponModel\";\r\nimport Cart from \"../../../../models/cartModel\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PUT\":\r\n      await removeCoupon(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst removeCoupon = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n\r\n    const { name, isApplied } = req.body;\r\n    const { type } = req.query;\r\n\r\n    const isExist = await Coupon.findOne({ name: name });\r\n    if (!isExist) {\r\n      return res.status(400).json({ err: \"Coupon does not exist\" });\r\n    }\r\n\r\n    // if (isExist.expiry < new Date(Date.now())) {\r\n    //   return res.status(400).json({ err: \"Coupon is expired.\" });\r\n    // }\r\n    // if (isCouponAlreadyUsed) {\r\n    //   return res.status(400).json({ err: \"This coupon code is already used.\" });\r\n    // }\r\n\r\n    const userCart = await Cart.findOne({ userId: result.id }).populate({\r\n      path: \"products\",\r\n      populate: {\r\n        path: \"productId\",\r\n        model: \"product\",\r\n      },\r\n    });\r\n    if (!userCart) {\r\n      return res.status(400).json({ err: \"No cart found\" });\r\n    }\r\n\r\n    // const totalAmount = userCart.products?.reduce(\r\n    //   (acc, curr) =>\r\n    //     curr?.productId?.discount > 0\r\n    //       ? acc + curr?.productId?.discountPrice * curr.quantity\r\n    //       : acc + curr?.productId?.price * curr?.quantity,\r\n    //   0\r\n    // );\r\n\r\n    await Cart.findOneAndUpdate(\r\n      { userId: result.id },\r\n      {\r\n        discount: 0,\r\n        couponCode: \"\",\r\n      }\r\n    );\r\n\r\n    const coupon = await isExist.updateOne({ users: result.id });\r\n\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Coupon Removed\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\coupon\\[id].js",["570"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Coupon from \"../../../models/couponModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"DELETE\":\r\n      await deleteCoupon(req, res);\r\n      break;\r\n    case \"PATCH\":\r\n      await updateCoupon(req, res);\r\n      break;\r\n    case \"GET\":\r\n      await getCoupon(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst deleteCoupon = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { id } = req.query;\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      const coupon = await Coupon.findOneAndDelete({ _id: id });\r\n\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: coupon,\r\n        msg: \"Coupon deleted.\",\r\n      });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access.\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst updateCoupon = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { id } = req.query;\r\n    const { name, expiry, discount } = req.body;\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      const coupon = await Coupon.findOneAndUpdate(\r\n        { _id: id },\r\n        {\r\n          name,\r\n          expiry,\r\n          discount,\r\n        }\r\n      );\r\n\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: coupon,\r\n      });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access.\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst getCoupon = async (req, res) => {\r\n  try {\r\n    const { id: name } = req.query;\r\n    const result = await auth(req, res);\r\n    if (result.id) {\r\n      const coupon = await Coupon.find({ name: name });\r\n      if (!coupon) {\r\n        return res.status(400).json({ err: \"Invalid coupon\" });\r\n      }\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: coupon,\r\n        msg: \"Coupon Applied\",\r\n      });\r\n    }\r\n\r\n    return res.status(400).json({ err: \"Token not found\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\dashboard\\index.js",["571"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Address from \"../../../models/addressModel\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport Product from \"../../../models/productModel\";\r\nimport User from \"../../../models/userModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport moment from \"moment/moment\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getDashboardSummary(req, res);\r\n  }\r\n};\r\n\r\nconst getDashboardSummary = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result?.role === \"admin\" || result?.root === true) {\r\n      const ordersCount = await Orders.find({\r\n        payment_status: true,\r\n      }).countDocuments();\r\n      const ordersPriceGroup = await Orders.aggregate([\r\n        {\r\n          $match: {\r\n            payment_status: true,\r\n          },\r\n        },\r\n        {\r\n          $group: {\r\n            _id: null,\r\n            sales: { $sum: \"$total\" },\r\n          },\r\n        },\r\n      ]);\r\n\r\n      const ordersPrice =\r\n        ordersPriceGroup.length > 0 ? ordersPriceGroup[0].sales : 0;\r\n\r\n      const productsCount = await Product.countDocuments();\r\n      const usersCount = await User.countDocuments();\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: {\r\n          ordersCount,\r\n          productsCount,\r\n          usersCount,\r\n          ordersPrice,\r\n        },\r\n      });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized Access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\hello.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\delivery.js",["572"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PUT\":\r\n      await deliverOrder(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst deliverOrder = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { orderId, payment_status } = req.body;\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      const updateOrder = await Orders.findOneAndUpdate(\r\n        { _id: orderId },\r\n        {\r\n          delivered: payment_status === true ? true : false,\r\n          dateOfDelivery: payment_status === true ? Date.now() : \"\",\r\n        }\r\n      );\r\n      return res.json({ status: \"success\", msg: \"Order Delivered!\" });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access!\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\index.js",["573"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport Products from \"../../../models/productModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getOrders(req, res);\r\n      break;\r\n    case \"POST\":\r\n      await createOrder(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getOrders = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n\r\n    let orders;\r\n    let totalCount = 0;\r\n    let { page, limit } = req.query;\r\n    if (!page) page = 1;\r\n    if (!limit) limit = 10;\r\n\r\n    const skip = (page - 1) * limit;\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      orders = await Orders.find()\r\n        .populate(\"user\", \"-password\")\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit);\r\n      totalCount = await Orders.countDocuments();\r\n    } else if (result.role === \"user\") {\r\n      orders = await Orders.find({ user: result.id })\r\n        .populate(\"user\", \"-password\")\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit);\r\n      totalCount = await Orders.find({ user: result.id }).countDocuments();\r\n    }\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: {\r\n        orders,\r\n        totalCount,\r\n      },\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst createOrder = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { address, cart, total, couponCode, discount } = req.body;\r\n\r\n    const newOrder = await Orders({\r\n      user: result.id,\r\n      cart,\r\n      total,\r\n      address,\r\n      couponCode,\r\n      discount,\r\n    });\r\n\r\n    // cart.filter((item) => {\r\n    //   return sold(\r\n    //     item.productId?._id,\r\n    //     item.quantity,\r\n    //     item.productId?.inStock,\r\n    //     item.productId.sold\r\n    //   );\r\n    // });\r\n    await newOrder.save();\r\n\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: newOrder,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst sold = async (id, quantity, oldInStock, oldSold) => {\r\n  await Products.findOneAndUpdate(\r\n    { _id: id },\r\n    {\r\n      inStock: oldInStock - quantity,\r\n      sold: quantity + oldSold,\r\n    }\r\n  );\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\payment.js",["574"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PUT\":\r\n      await orderPayment(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst orderPayment = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const {\r\n      orderId,\r\n      name,\r\n      amount,\r\n      paymentId,\r\n      method,\r\n      subTotal,\r\n      paymentStatus,\r\n      dateOfPayment,\r\n    } = req.body;\r\n    const updateOrder = await Orders.findOneAndUpdate(\r\n      { _id: orderId },\r\n      {\r\n        $set: {\r\n          user: name,\r\n\r\n          total: amount,\r\n          paymentId: paymentId,\r\n          method: method,\r\n          subTotal: subTotal,\r\n          payment_status: paymentStatus,\r\n          dateOfPayment: dateOfPayment,\r\n        },\r\n      }\r\n    );\r\n    return res.json({ status: \"success\", msg: \"Payment Done\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\order\\[id].js",["575"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Orders from \"../../../models/orderModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getOrder(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getOrder = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { id } = req.query;\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      const order = await Orders.findById(id).populate(\"user\", \"-password\");\r\n\r\n      return res.json({ status: \"success\", Data: order });\r\n    } else if (result.role !== \"admin\") {\r\n      const order = await Orders.findById(id).populate(\"user\", \"-password\");\r\n\r\n      return res.json({ status: \"success\", Data: order });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\pay.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\payment.js",["576"],[],"import Stripe from \"stripe\";\r\nimport { v4 as uuidV4 } from \"uuid\";\r\nimport auth from \"../../../middleware/auth\";\r\n\r\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\r\n\r\nconst stripe = Stripe(`${stripeSecretKey}`);\r\n\r\nexport default async (req, res) => {\r\n  const { paymentInfo, cart } = req.body;\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result.id) {\r\n      let price = 0;\r\n      cart.forEach((item) => {\r\n        price = price + item.quantity * item.price;\r\n      });\r\n      const previousCustomer = await stripe.customers.list({\r\n        email: paymentInfo.email,\r\n      });\r\n      const isExistingCustomer = previousCustomer.data.length > 0;\r\n      let newCustomer = null;\r\n      if (!isExistingCustomer) {\r\n        newCustomer = await stripe.customers.create({\r\n          email: paymentInfo.email,\r\n          source: paymentInfo.id,\r\n        });\r\n      }\r\n      const charge = await stripe.paymentIntents.create(\r\n        {\r\n          currency: \"INR\",\r\n          amount: price * 100,\r\n          receipt_email: paymentInfo.email,\r\n          customer: isExistingCustomer\r\n            ? previousCustomer.data[0].id\r\n            : newCustomer.id,\r\n          description: \"Made a payment\",\r\n        },\r\n        {\r\n          idempotencyKey: uuidV4(),\r\n        }\r\n      );\r\n      return res.json({ status: \"success\" });\r\n    }\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\product\\banner\\index.js",["577"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Products from \"../../../../models/productModel\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getBannerProducts(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getBannerProducts = async (req, res) => {\r\n  try {\r\n    const products = await Products.find({ type: \"banner\" });\r\n    if (products?.length > 3) {\r\n      return res\r\n        .status(400)\r\n        .json({ err: \"Upto 3 products can be added in the banner\" });\r\n    }\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: products,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\product\\index.js",["578"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Products from \"../../../models/productModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getProducts(req, res);\r\n      break;\r\n    case \"POST\":\r\n      await createProduct(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getProducts = async (req, res) => {\r\n  try {\r\n    let { page, limit } = req.query;\r\n    if (!page) page = 1;\r\n    if (!limit) limit = 10;\r\n\r\n    const skip = (page - 1) * limit;\r\n    const totalCount = await Products.countDocuments();\r\n    const products = await Products.find()\r\n      .sort({ createdAt: -1 })\r\n      .skip(skip)\r\n      .limit(limit);\r\n\r\n    res.json({\r\n      status: \"success\",\r\n      result: products.length,\r\n      Data: products,\r\n      totalCount: totalCount,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst createProduct = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const {\r\n      title,\r\n      price,\r\n      inStock,\r\n      description,\r\n      category,\r\n      images,\r\n      discount,\r\n      type,\r\n    } = req.body;\r\n    if (result.role !== \"admin\" || result.root === false) {\r\n      return res.status(400).json({ err: \"Unauthorized access\" });\r\n    }\r\n    if (\r\n      !title ||\r\n      !price ||\r\n      !inStock ||\r\n      !description ||\r\n      !category ||\r\n      images?.length === 0\r\n    ) {\r\n      return res\r\n        .status(400)\r\n        .json({ err: \"Please provide all the required fields\" });\r\n    }\r\n    const discountPrice = discount\r\n      ? Math.floor(price - (price * discount) / 100)\r\n      : null;\r\n    console.log({ discountPrice });\r\n    const newProduct = new Products({\r\n      title: title.toLowerCase(),\r\n      price,\r\n      inStock,\r\n      description,\r\n      category,\r\n      images,\r\n      discount,\r\n      discountPrice,\r\n      type,\r\n    });\r\n    await newProduct.save();\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Product created successfully.\",\r\n      Data: newProduct,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\product\\[id].js",["579"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Products from \"../../../models/productModel\";\r\nimport Categories from \"../../../models/categoryModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getProduct(req, res);\r\n      break;\r\n    case \"PATCH\":\r\n      await updateProduct(req, res);\r\n      break;\r\n    case \"DELETE\":\r\n      await deleteProduct(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getProduct = async (req, res) => {\r\n  try {\r\n    const { id } = req.query;\r\n    const product = await Products.findById(id);\r\n    // console.log({ product });\r\n\r\n    if (!product)\r\n      return res.status(400).json({ err: \"This Product does not exist.\" });\r\n\r\n    const category = await Categories.findById(product.category);\r\n\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: product,\r\n      category: category,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst updateProduct = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const {\r\n      title,\r\n      price,\r\n      inStock,\r\n      description,\r\n      category,\r\n      images,\r\n      discount,\r\n      type,\r\n    } = req.body;\r\n    console.log({ discount });\r\n    const { id } = req.query;\r\n    if (result.role !== \"admin\" || result.root === false) {\r\n      return res.status(400).json({ err: \"Unauthorized access\" });\r\n    }\r\n    if (\r\n      !title ||\r\n      !price ||\r\n      !inStock ||\r\n      !description ||\r\n      !category ||\r\n      images?.length === 0\r\n    ) {\r\n      return res\r\n        .status(400)\r\n        .json({ err: \"Please provide all the required fields\" });\r\n    }\r\n\r\n    const discountPrice = discount\r\n      ? Math.floor(price - (price * discount) / 100)\r\n      : null;\r\n    console.log({ discountPrice });\r\n    const updateProduct = await Products.findOneAndUpdate(\r\n      { _id: id },\r\n      {\r\n        title: title.toLowerCase(),\r\n        price,\r\n        inStock,\r\n        description,\r\n        category,\r\n        images,\r\n        discount,\r\n        discountPrice,\r\n        type,\r\n      }\r\n    );\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Product updated successfully.\",\r\n      Data: updateProduct,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst deleteProduct = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { id } = req.query;\r\n    if (result.role !== \"admin\" || result.root === false) {\r\n      return res.status(400).json({ err: \"Unauthorized access\" });\r\n    }\r\n\r\n    const deleteProduct = await Products.findOneAndDelete({ _id: id });\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Product Deleted.\",\r\n      Data: deleteProduct,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\salesData\\index.js",["580"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport Address from \"../../../models/addressModel\";\r\nimport Orders from \"../../../models/orderModel\";\r\n\r\nimport auth from \"../../../../middleware/auth\";\r\nimport moment from \"moment/moment\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"POST\":\r\n      await getSalesData(req, res);\r\n  }\r\n};\r\n\r\nconst getSalesData = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result?.role === \"admin\" || result?.root === true) {\r\n      const { startDate, endDate } = req.body;\r\n\r\n      function getDates(startDate, stopDate) {\r\n        var dateArray = [];\r\n        var currentDate = moment(startDate);\r\n        var stopDate = moment(stopDate);\r\n        while (currentDate <= stopDate) {\r\n          dateArray.push({ date: moment(currentDate).format(\"DD-MM-YYYY\") });\r\n          currentDate = moment(currentDate).add(1, \"days\");\r\n        }\r\n        return dateArray;\r\n      }\r\n\r\n      const extendedDate = getDates(startDate, endDate);\r\n\r\n      const salesData = await Orders.aggregate([\r\n        {\r\n          $match: {\r\n            dateOfPayment: {\r\n              $gte: new Date(startDate),\r\n              $lte: new Date(endDate),\r\n            },\r\n          },\r\n        },\r\n        {\r\n          $unwind: \"$dateOfPayment\",\r\n        },\r\n        {\r\n          $group: {\r\n            _id: {\r\n              $dateToString: {\r\n                format: \"%d-%m-%Y\",\r\n                date: {\r\n                  $toDate: \"$dateOfPayment\",\r\n                },\r\n              },\r\n            },\r\n            total: {\r\n              $sum: \"$total\",\r\n            },\r\n          },\r\n        },\r\n        {\r\n          $project: {\r\n            _id: 0,\r\n            date: \"$_id\",\r\n            count: \"$total\",\r\n          },\r\n        },\r\n      ]);\r\n      extendedDate.forEach((obj) => {\r\n        const elementInArr2 = salesData.find((o) => o.date === obj.date);\r\n\r\n        if (elementInArr2) obj.Revenue = elementInArr2.count;\r\n        if (!elementInArr2) obj.Revenue = 0;\r\n      });\r\n      return res.json({\r\n        status: \"success\",\r\n        Data: extendedDate,\r\n      });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized Access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\search\\[id].js",["581"],[],"import connectDB from \"@/utils/connectDB\";\r\n\r\nimport Products from \"../../../models/productModel\";\r\n\r\nconnectDB();\r\n\r\nexport const config = {\r\n  api: {\r\n    externalResolver: true,\r\n  },\r\n};\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"GET\":\r\n      await getProductsFromSearchQuery(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getProductsFromSearchQuery = async (req, res) => {\r\n  try {\r\n    let { id, page, limit } = req.query;\r\n\r\n    if (!page) page = 1;\r\n    if (!limit) limit = 10;\r\n\r\n    const skip = (page - 1) * limit;\r\n    const query = [\r\n      {\r\n        $match: {\r\n          $or: [{ title: { $regex: id } }, { description: { $regex: id } }],\r\n        },\r\n      },\r\n      {\r\n        $facet: {\r\n          products: [\r\n            {\r\n              $skip: skip,\r\n            },\r\n            {\r\n              $limit: parseInt(limit),\r\n            },\r\n            {\r\n              $project: {\r\n                createdAt: 0,\r\n                updatedAt: 0,\r\n                __v: 0,\r\n              },\r\n            },\r\n          ],\r\n          count: [\r\n            {\r\n              $count: \"count\",\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      {\r\n        $project: {\r\n          products: 1,\r\n          totalCount: {\r\n            $arrayElemAt: [\"$count\", 0],\r\n          },\r\n        },\r\n      },\r\n    ];\r\n\r\n    const products = await Products.aggregate(query);\r\n\r\n    return res.json({\r\n      status: \"success\",\r\n      Data: products,\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\user\\index.js",["582"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport User from \"../../../models/userModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PATCH\":\r\n      await updateProfile(req, res);\r\n      break;\r\n    case \"GET\":\r\n      await getUsers(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst getUsers = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result.role === \"admin\" || result.root === true) {\r\n      let { page, limit } = req.query;\r\n      if (!page) page = 1;\r\n      if (!limit) limit = 10;\r\n\r\n      const skip = (page - 1) * limit;\r\n      const users = await User.find()\r\n        .sort({ createdAt: -1 })\r\n        .skip(skip)\r\n        .limit(limit);\r\n      let totalCount = await User.countDocuments();\r\n      return res.json({ status: \"success\", Data: { users, totalCount } });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst updateProfile = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { name } = req.body;\r\n    const user = await User.findById({ _id: result.id });\r\n    if (!user) {\r\n      return res.status(400).json({ err: \"User does not exist.\" });\r\n    }\r\n    await User.findOneAndUpdate({ _id: result.id }, { name: name });\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Password updated successfully!\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\user\\resetPassword.js",["583"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport User from \"../../../models/userModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PATCH\":\r\n      await resetPassword(req, res);\r\n      break;\r\n  }\r\n};\r\n\r\nconst resetPassword = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    const { oldPassword, newPassword } = req.body;\r\n    const user = await User.findById({ _id: result.id });\r\n    if (!user) {\r\n      return res.status(400).json({ err: \"User does not exist.\" });\r\n    }\r\n\r\n    const decryptOldPassword = CryptoJS.AES.decrypt(\r\n      oldPassword,\r\n      \"secret key 1\"\r\n    );\r\n    const decryptNewPassword = CryptoJS.AES.decrypt(\r\n      newPassword,\r\n      \"secret key 1\"\r\n    );\r\n    const stringedOldPassword = decryptOldPassword.toString(CryptoJS.enc.Utf8);\r\n    const stringedNewPassword = decryptNewPassword.toString(CryptoJS.enc.Utf8);\r\n    const isMatch = await bcrypt.compare(stringedOldPassword, user.password);\r\n    if (!isMatch)\r\n      return res\r\n        .status(400)\r\n        .json({ err: \"Please enter correct old password!\" });\r\n\r\n    const passwordHash = await bcrypt.hash(stringedNewPassword, 12);\r\n    await User.findOneAndUpdate({ _id: result.id }, { password: passwordHash });\r\n    return res.json({\r\n      status: \"success\",\r\n      msg: \"Password updated successfully!\",\r\n    });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\user\\[id].js",["584"],[],"import connectDB from \"@/utils/connectDB\";\r\nimport User from \"../../../models/userModel\";\r\nimport auth from \"../../../../middleware/auth\";\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case \"PATCH\":\r\n      await updateUserRole(req, res);\r\n      break;\r\n    case \"DELETE\":\r\n      await deleteUser(req, res);\r\n  }\r\n};\r\n\r\nconst updateUserRole = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result?.role === \"admin\" || result?.root === true) {\r\n      const { userId, role, name } = req.body;\r\n      const user = await User.findOne({ _id: userId });\r\n      if (user.root === true) {\r\n        return res.status(400).json({ err: \"Root user cannot be updated.\" });\r\n      }\r\n\r\n      await User.updateOne(\r\n        { _id: userId },\r\n        {\r\n          role: role,\r\n          name: name,\r\n        }\r\n      );\r\n\r\n      return res.json({ status: \"success\", msg: \"User role updated!\" });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n\r\nconst deleteUser = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result?.role === \"admin\" || result?.root === true) {\r\n      const { id } = req.query;\r\n      const user = await User.findOne({ _id: id });\r\n      if (user.root === true) {\r\n        return res.status(400).json({ err: \"Root user cannot be deleted!\" });\r\n      }\r\n      await User.deleteOne({ _id: id });\r\n      return res.json({ status: \"success\", msg: \"User deleted!\" });\r\n    }\r\n    return res.status(400).json({ err: \"Unauthorized access\" });\r\n  } catch (error) {\r\n    return res.status(500).json({ err: error.message });\r\n  }\r\n};\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\api\\webhook.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\cancel.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\cart.js",["585","586"],[],"import { Box, Button, CircularProgress, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport CartProduct from \"../../components/CartProduct\";\r\nimport CartSummary from \"../../components/CartSummary\";\r\nimport Wrapper from \"../../components/Wrapper/Wrapper\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { addToCart } from \"../../store/Actions\";\r\nimport CustomInputBox from \"../../components/CustomInputBox/CustomInputBox\";\r\nimport CouponCode from \"../../components/CouponCode/CouponCode\";\r\nimport { toast } from \"react-toastify\";\r\nimport Confetti from \"react-confetti\";\r\nimport useWindowSize from \"../../hooks/useWindowSize\";\r\nimport CustomModal from \"../../components/Modal/CustomModal\";\r\nimport shortid from \"shortid\";\r\n\r\nfunction Cart() {\r\n  const [couponCode, setCouponCode] = useState(\"\");\r\n  const [isCouponApplied, setIsCouponApplied] = useState(false);\r\n  const [isCouponLoading, setIsCouponLoading] = useState(false);\r\n  const [showConfetti, setShowConfetti] = useState(false);\r\n\r\n  const [cartData, setCartData] = useState([]);\r\n  const [products, setProducts] = useState([]);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [triggerLoginCart, setTriggerLoginCart] = useState(false);\r\n  const [triggerGuestCart, setTriggerGuestCart] = useState(false);\r\n  const [total, setTotal] = useState(0);\r\n  const [discount, setDiscount] = useState(0);\r\n  const windowSize = useWindowSize();\r\n\r\n  const { cart, auth } = state;\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n  const cartId =\r\n    typeof window !== \"undefined\" && localStorage.getItem(\"cartId\");\r\n  useEffect(() => {\r\n    if (token && auth?.isVerified) {\r\n      const fetchCart = async () => {\r\n        const res = await apiCall(\"GET\", `cart/${auth?.user?.id}`, token);\r\n        if (res?.data?.status === \"success\") {\r\n          console.log({ res1: res });\r\n          setCartData(res?.data?.Data?.cart?.[0]?.products);\r\n          setDiscount(res?.data?.Data?.cart?.[0]?.discount);\r\n          setCouponCode(res?.data?.Data?.cart?.[0]?.couponCode);\r\n          res?.data?.Data?.cart?.[0]?.couponCode?.length > 0 &&\r\n            setIsCouponApplied(true);\r\n          setTotal(res?.data?.Data?.totalAmount);\r\n          const totalQuantity = res?.data?.Data?.cart?.[0]?.products?.reduce(\r\n            (acc, curr) => acc + curr?.quantity,\r\n            0\r\n          );\r\n          return dispatch(addToCart(\"\", \"\", totalQuantity, total));\r\n        }\r\n      };\r\n      fetchCart();\r\n    }\r\n  }, [auth?.isVerified, triggerLoginCart, couponCode?.readOnly]);\r\n\r\n  useEffect(() => {\r\n    if (!token && cartId !== null) {\r\n      const fetchGuestCart = async () => {\r\n        const res = await apiCall(\"GET\", `cart/guest/${cartId}`);\r\n        if (res?.data?.status === \"success\") {\r\n          setCartData(res?.data?.Data?.[0]?.products);\r\n          const totalQuantity = res?.data?.Data?.[0]?.products?.reduce(\r\n            (acc, curr) => acc + curr?.quantity,\r\n            0\r\n          );\r\n          return dispatch(addToCart(\"\", \"\", totalQuantity));\r\n        }\r\n      };\r\n      fetchGuestCart();\r\n    }\r\n  }, [triggerGuestCart]);\r\n\r\n  const handleCouponCodeApply = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"hi\");\r\n    setIsCouponLoading(true);\r\n    try {\r\n      const data = {\r\n        name: couponCode,\r\n        isApplied: isCouponApplied,\r\n      };\r\n\r\n      const res = await apiCall(\"PUT\", `coupon/applyCoupon`, token, data);\r\n      if (res.data?.status === \"success\") {\r\n        toast.success(res?.data?.msg);\r\n        setIsCouponApplied(true);\r\n        setTriggerLoginCart(!triggerLoginCart);\r\n        setIsCouponLoading(false);\r\n        setShowConfetti(true);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsCouponApplied(false);\r\n      setCouponCode(\"\");\r\n      setIsCouponLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleCouponCodeRemove = async (e) => {\r\n    e.preventDefault();\r\n    console.log(\"remove\");\r\n    setIsCouponLoading(true);\r\n    try {\r\n      const data = {\r\n        name: couponCode,\r\n        isApplied: isCouponApplied,\r\n      };\r\n\r\n      const res = await apiCall(\"PUT\", `coupon/removeCoupon`, token, data);\r\n      if (res.data?.status === \"success\") {\r\n        toast.success(res?.data?.msg);\r\n        setIsCouponApplied(false);\r\n        setTriggerLoginCart(!triggerLoginCart);\r\n        setIsCouponLoading(false);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsCouponApplied(false);\r\n      setCouponCode(\"\");\r\n      setIsCouponLoading(false);\r\n    }\r\n  };\r\n\r\n  if (cartData?.length === 0 || (cartData === undefined && loading === false)) {\r\n    return <Typography>No Products Found!</Typography>;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        sx={{\r\n          padding: \"0px 10px\",\r\n          marginTop: \"20px\",\r\n          marginBottom: \"10px\",\r\n        }}\r\n      >\r\n        <Typography\r\n          variant=\"h4\"\r\n          sx={{ textAlign: \"center\", marginTop: \"20px\" }}\r\n        >\r\n          Shopping Cart\r\n        </Typography>\r\n        <Grid container sx={{ marginTop: \"30px\" }} columnSpacing={12}>\r\n          <Grid\r\n            item\r\n            xs={12}\r\n            sm={12}\r\n            md={8}\r\n            // marginRight={{\r\n            //   xs: 0,\r\n            //   sm: 3,\r\n            // }}\r\n\r\n            marginBottom={5}\r\n          >\r\n            <Typography variant=\"h5\">Cart Items</Typography>\r\n            <hr />\r\n            {loading === true ? (\r\n              <CircularProgress\r\n                sx={{\r\n                  color: \"#539165\",\r\n                  marginLeft: \"50%\",\r\n                  mt: 3,\r\n                  mb: 2,\r\n                }}\r\n              />\r\n            ) : (\r\n              cartData?.map((product) => (\r\n                <CartProduct\r\n                  key={shortid.generate()}\r\n                  product={product}\r\n                  // setLoading={setLoading}\r\n                  setProducts={setProducts}\r\n                  setCartData={setCartData}\r\n                  setTriggerLoginCart={setTriggerLoginCart}\r\n                  triggerLoginCart={triggerLoginCart}\r\n                  triggerGuestCart={triggerGuestCart}\r\n                  setTriggerGuestCart={setTriggerGuestCart}\r\n                />\r\n              ))\r\n            )}\r\n          </Grid>\r\n          <Grid item xs={12} sm={12} md={4}>\r\n            <Typography variant=\"h5\">Summary</Typography>\r\n            <hr />\r\n            <Box sx={{ width: \"100% !important\" }}>\r\n              {auth?.isVerified && (\r\n                <CouponCode\r\n                  couponCode={couponCode}\r\n                  setCouponCode={setCouponCode}\r\n                  isCouponApplied={isCouponApplied}\r\n                  setIsCouponApplied={setIsCouponApplied}\r\n                  handleCouponCodeApply={handleCouponCodeApply}\r\n                  handleCouponCodeRemove={handleCouponCodeRemove}\r\n                  isCouponLoading={isCouponLoading}\r\n                />\r\n              )}\r\n            </Box>\r\n\r\n            <CartSummary\r\n              totalAmount={total}\r\n              discount={discount}\r\n              setDiscount={setDiscount}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {showConfetti === true ? (\r\n          <Confetti\r\n            width={windowSize?.width}\r\n            height={600}\r\n            recycle={false}\r\n            numberOfPieces={500}\r\n          />\r\n        ) : null}\r\n        {showConfetti === true && (\r\n          <CustomModal\r\n            open={showConfetti}\r\n            setOpen={setShowConfetti}\r\n            modalTitle={\"Yaayyy!!  Congratulations!!!\"}\r\n            declineButtonName={\"Close\"}\r\n            showAgreedButton={false}\r\n            showDeclineButton={true}\r\n          >\r\n            <Typography>Your coupon code is applied.</Typography>\r\n          </CustomModal>\r\n        )}\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\categories\\index.js",["587"],[],"import Head from \"next/head\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Wrapper from \"../../../components/Wrapper/Wrapper\";\r\nimport { Box, CircularProgress, Typography } from \"@mui/material\";\r\nimport HomeCategoryCard from \"../../../components/HomeCategoryCard/HomeCategoryCard\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport PaginationComponent from \"../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction Categories() {\r\n  const [categories, setCategories] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const res = await apiCall(\r\n          \"GET\",\r\n          `category?page=${page}&limit=${productLimit}`\r\n        );\r\n        if (res?.data?.status === \"success\") {\r\n          setCategories(res?.data?.Data?.categories);\r\n          setTotalCount(res?.data?.Data?.totalCount);\r\n          setIsLoading(false);\r\n        }\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchCategories();\r\n  }, [page]);\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Categories Page</title>\r\n      </Head>\r\n      <Wrapper>\r\n        <Box\r\n          sx={{\r\n            padding: \"0px 10px\",\r\n            marginTop: \"20px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <Typography\r\n            sx={{\r\n              fontSize: \"24px\",\r\n              fontWeight: 600,\r\n              textAlign: \"center\",\r\n              marginBottom: \"20px\",\r\n            }}\r\n          >\r\n            All Categories\r\n          </Typography>\r\n          {isLoading ? (\r\n            <CircularProgress\r\n              sx={{\r\n                color: \"#539165\",\r\n                marginLeft: \"50%\",\r\n                mt: 3,\r\n                mb: 2,\r\n              }}\r\n              size={32}\r\n            />\r\n          ) : (\r\n            <Box sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n              {categories?.map((category) => (\r\n                <HomeCategoryCard key={category?._id} category={category} />\r\n              ))}\r\n            </Box>\r\n          )}\r\n          {totalCount > 10 && (\r\n            <PaginationComponent\r\n              page={page}\r\n              setPage={setPage}\r\n              count={Math.ceil(totalCount / productLimit)}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Categories;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\categories\\[id].js",["588"],[],"import Head from \"next/head\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Wrapper from \"../../../components/Wrapper/Wrapper\";\r\nimport SearchProductList from \"../../../components/SearchProductList/SearchProductList\";\r\nimport { Box, CircularProgress } from \"@mui/material\";\r\nimport { useRouter } from \"next/router\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport PaginationComponent from \"../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction CategoryProducts() {\r\n  const router = useRouter();\r\n  const [products, setProducts] = useState([]);\r\n  const { id, name } = router.query;\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        if (id) {\r\n          const res = await apiCall(\r\n            \"GET\",\r\n            `category/products/${id}?page=${page}&limit=${productLimit}`\r\n          );\r\n          if (res?.data?.status === \"success\") {\r\n            setProducts(res?.data?.Data?.[0]?.products);\r\n            setTotalCount(res?.data?.Data?.[0]?.totalCount?.count);\r\n            setIsLoading(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.message);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchProducts();\r\n  }, [id, page]);\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Products List</title>\r\n      </Head>\r\n      <Wrapper>\r\n        <Box\r\n          sx={{\r\n            padding: \"0px 10px\",\r\n            marginTop: \"20px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          {isLoading ? (\r\n            <CircularProgress\r\n              sx={{\r\n                color: \"#539165\",\r\n                marginLeft: \"50%\",\r\n                mt: 3,\r\n                mb: 2,\r\n              }}\r\n              size={32}\r\n            />\r\n          ) : (\r\n            <SearchProductList\r\n              type=\"category\"\r\n              products={products}\r\n              name={name}\r\n            />\r\n          )}\r\n          {totalCount > 10 && (\r\n            <PaginationComponent\r\n              page={page}\r\n              setPage={setPage}\r\n              count={Math.ceil(totalCount / productLimit)}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryProducts;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\checkout\\[id].js",["589","590"],[],"import { Box, Button, CircularProgress, Typography } from \"@mui/material\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport Wrapper from \"../../../components/Wrapper/Wrapper\";\r\nimport CustomInputBox from \"../../../components/CustomInputBox/CustomInputBox\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { toast } from \"react-toastify\";\r\nimport ArrowBackIosIcon from \"@mui/icons-material/ArrowBackIos\";\r\nimport { useRouter } from \"next/router\";\r\nimport { DataContext } from \"../../../store/GlobalState\";\r\n\r\nfunction Checkout() {\r\n  const router = useRouter();\r\n  const initialState = {\r\n    name: \"\",\r\n    address1: \"\",\r\n    address2: \"\",\r\n    city: \"\",\r\n    state: \"\",\r\n    phone: \"\",\r\n  };\r\n  const [error, setError] = useState(null);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [address, setAddress] = useState(initialState);\r\n  const [cart, setCart] = useState(null);\r\n  const [couponCode, setCouponCode] = useState(\"\");\r\n  const [discount, setDiscount] = useState(0);\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n\r\n  const isValid = () => {\r\n    let errors = {};\r\n    let valid = true;\r\n    if (\r\n      !address?.name ||\r\n      !address?.address1 ||\r\n      !address?.city ||\r\n      !address?.state ||\r\n      !address?.phone\r\n    ) {\r\n      errors[\"all\"] = \"Please enter all required fields\";\r\n      valid = false;\r\n    }\r\n    if (address?.name?.length < 3) {\r\n      errors[\"name\"] = \"Name should be atleast 3 letters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (address?.address1?.length < 8) {\r\n      errors[\"address1\"] = \"Address should be atleast 8 letters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (address?.city?.length < 3) {\r\n      errors[\"city\"] = \"City should be atleast 3 letters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (address?.state?.length < 3) {\r\n      errors[\"state\"] = \"State should be atleast 3 letters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (!validatePhoneNumber(address?.phone)) {\r\n      errors[\"phone\"] = \"Please enter valid phone number\";\r\n      valid = false;\r\n    }\r\n    setError(errors);\r\n    return valid;\r\n  };\r\n\r\n  function validatePhoneNumber(input_str) {\r\n    var re = /^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$/;\r\n\r\n    return re.test(input_str);\r\n  }\r\n\r\n  useEffect(() => {\r\n    const getAddress = async () => {\r\n      try {\r\n        const res = await apiCall(\"GET\", \"address\", token);\r\n        if (res?.data?.status === \"success\") {\r\n          setIsEdit(true);\r\n          const { name, address1, address2, city, state, phone } =\r\n            res?.data?.Data?.[0];\r\n          setAddress({\r\n            name,\r\n            address1,\r\n            address2,\r\n            city,\r\n            state,\r\n            phone,\r\n          });\r\n        }\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setIsEdit(false);\r\n      }\r\n    };\r\n    getAddress();\r\n  }, []);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    const validate = isValid();\r\n    const data = {\r\n      name: address?.name,\r\n      address1: address?.address1,\r\n      address2: address?.address2,\r\n      city: address?.city,\r\n      state: address?.state,\r\n      phone: address?.phone,\r\n    };\r\n    if (validate === true) {\r\n      try {\r\n        if (isEdit) {\r\n          const res = await apiCall(\"PUT\", \"address\", token, data);\r\n          if (res?.data?.status === \"success\") {\r\n            toast.success(\"Address updated successfully!\");\r\n          }\r\n\r\n          setLoading(false);\r\n        } else {\r\n          const res = await apiCall(\"POST\", \"address\", token, data);\r\n          console.log({ res });\r\n          if (res?.data?.status === \"success\") {\r\n            toast.success(\"Address added successfully!\");\r\n          }\r\n          setLoading(false);\r\n        }\r\n        const orderData = {\r\n          cart: cart,\r\n          total: total,\r\n          address: address,\r\n          couponCode: couponCode,\r\n          discount: discount,\r\n        };\r\n\r\n        const createOrderRes = await apiCall(\"POST\", \"order\", token, orderData);\r\n        console.log({ createOrderRes });\r\n        if (createOrderRes?.data?.status === \"success\") {\r\n          router.push(`/order/${createOrderRes?.data?.Data?._id}`);\r\n        }\r\n        setLoading(false);\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.err);\r\n        setLoading(false);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const { state } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const [total, setTotal] = useState(0);\r\n\r\n  // useEffect(() => {\r\n  //   const getTotal = () => {\r\n  //     const res = cart.reduce((prev, item) => {\r\n  //       return prev + item.price * item.quantity;\r\n  //     }, 0);\r\n\r\n  //     setTotal(res);\r\n  //   };\r\n\r\n  //   getTotal();\r\n  // }, [cart]);\r\n\r\n  useEffect(() => {\r\n    if (token && auth?.isVerified) {\r\n      const fetchCart = async () => {\r\n        const res = await apiCall(\"GET\", `cart/${auth?.user?.id}`, token);\r\n        if (res?.data?.status === \"success\") {\r\n          console.log({ res });\r\n          setCouponCode(res?.data?.Data?.cart?.[0]?.couponCode);\r\n          setDiscount(res?.data?.Data?.cart?.[0]?.discount);\r\n          setTotal(res?.data?.Data?.totalAmount);\r\n          setCart(res?.data?.Data?.cart?.[0]?.products);\r\n        }\r\n      };\r\n      fetchCart();\r\n    }\r\n  }, [auth?.isVerified]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        component=\"form\"\r\n        noValidate\r\n        sx={{\r\n          mt: 1,\r\n          padding: \"20px\",\r\n\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          maxWidth: {\r\n            xs: \"95%\",\r\n            md: \"700px\",\r\n          },\r\n          height: {\r\n            xs: \"90vh\",\r\n            sm: \"fit-content\",\r\n          },\r\n          margin: \"20px auto 10px auto\",\r\n          boxShadow: \"1px 8px 8px whitesmoke\",\r\n        }}\r\n      >\r\n        <Button\r\n          sx={{\r\n            marginRight: \"auto\",\r\n            color: \"#539165\",\r\n          }}\r\n          startIcon={<ArrowBackIosIcon />}\r\n          onClick={() => router.push(\"/cart\")}\r\n        >\r\n          Go Back\r\n        </Button>\r\n        <Typography variant=\"h5\" textAlign={\"center\"}>\r\n          Enter Address\r\n        </Typography>\r\n        <CustomInputBox\r\n          id={\"name\"}\r\n          label={\"Name\"}\r\n          name={\"name\"}\r\n          value={address?.name}\r\n          onChange={(e) => setAddress({ ...address, name: e.target.value })}\r\n          errorValue={error?.name}\r\n          inputStyle={{\r\n            width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n          }}\r\n          required={true}\r\n        />\r\n        <CustomInputBox\r\n          id={\"address1\"}\r\n          label={\"Address 1\"}\r\n          name={\"address1\"}\r\n          value={address?.address1}\r\n          onChange={(e) => setAddress({ ...address, address1: e.target.value })}\r\n          errorValue={error?.address1}\r\n          inputStyle={{ width: \"100%\" }}\r\n          required={true}\r\n        />\r\n        <CustomInputBox\r\n          id={\"address2\"}\r\n          label={\"Address 2\"}\r\n          name={\"address2\"}\r\n          value={address?.address2}\r\n          onChange={(e) => setAddress({ ...address, address2: e.target.value })}\r\n          inputStyle={{ width: \"100%\" }}\r\n          required={false}\r\n        />\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <CustomInputBox\r\n            id={\"city\"}\r\n            label={\"City\"}\r\n            name={\"city\"}\r\n            value={address?.city}\r\n            onChange={(e) => setAddress({ ...address, city: e.target.value })}\r\n            errorValue={error?.city}\r\n            containerStyle={{\r\n              width: \"100%\",\r\n              marginRight: \"10px\",\r\n            }}\r\n            required={true}\r\n          />\r\n          <CustomInputBox\r\n            id={\"state\"}\r\n            label={\"State\"}\r\n            name={\"state\"}\r\n            value={address?.state}\r\n            onChange={(e) => setAddress({ ...address, state: e.target.value })}\r\n            errorValue={error?.state}\r\n            containerStyle={{ width: \"100%\" }}\r\n            required={true}\r\n          />\r\n        </Box>\r\n        <CustomInputBox\r\n          id={\"phone\"}\r\n          label={\"Phone No.\"}\r\n          name={\"phone\"}\r\n          value={address?.phone}\r\n          onChange={(e) => setAddress({ ...address, phone: e.target.value })}\r\n          errorValue={error?.phone}\r\n          inputStyle={{ width: \"100%\" }}\r\n          required={true}\r\n        />\r\n        {loading === true ? (\r\n          <CircularProgress\r\n            sx={{\r\n              color: \"#539165\",\r\n              marginLeft: \"50%\",\r\n              mt: 3,\r\n              mb: 2,\r\n            }}\r\n          />\r\n        ) : (\r\n          <Button\r\n            variant=\"contained\"\r\n            sx={{\r\n              width: \"100%\",\r\n              mt: 3,\r\n              mb: 2,\r\n              background: \"#539165\",\r\n              \"&:hover\": { background: \"#539165\" },\r\n              borderRadius: \"30px\",\r\n              height: \"50px\",\r\n            }}\r\n            onClick={(e) => {\r\n              handleSubmit(e);\r\n            }}\r\n            disabled={\r\n              !address?.name ||\r\n              !address?.address1 ||\r\n              !address?.city ||\r\n              !address?.state ||\r\n              !address?.phone\r\n            }\r\n          >\r\n            {isEdit ? \"Edit and proceed\" : \"Proceed\"}\r\n          </Button>\r\n        )}\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Checkout;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\index.js",["591"],[],"import Head from \"next/head\";\nimport { useContext, useEffect } from \"react\";\nimport { DataContext } from \"../../store/GlobalState\";\nimport { apiCall } from \"@/utils/apiCall\";\nimport { useState } from \"react\";\nimport { Box, Button, CircularProgress, Typography } from \"@mui/material\";\nimport ProductCard from \"../../components/ProductCard/ProductsCard\";\nimport { useRouter } from \"next/router\";\nimport HeroBanner from \"../../components/HeroBanner/HeroBanner\";\nimport Wrapper from \"../../components/Wrapper/Wrapper\";\nimport HomeCategoryCard from \"../../components/HomeCategoryCard/HomeCategoryCard\";\nimport { toast } from \"react-toastify\";\nimport PaginationComponent from \"../../components/PaginationComponent/PaginationComponent\";\n\nconst Home = (props) => {\n  const [bannerProducts, setBannerProducts] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const router = useRouter();\n  const [isProductsLoading, setIsProductsLoading] = useState(false);\n  const [isCategoryLoading, setIsCategoryLoading] = useState(false);\n  const [isBannerLoading, setIsBannerLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [productLimit, setProductLimit] = useState(10);\n  const [totalCount, setTotalCount] = useState(0);\n\n  const handleCardClick = (product) => {\n    router.push(`/product/${product?._id}`);\n  };\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      setIsCategoryLoading(true);\n      try {\n        const res = await apiCall(\"GET\", \"category\");\n        if (res?.data?.status === \"success\") {\n          setIsCategoryLoading(false);\n          setCategories(res?.data?.Data?.categories);\n        }\n      } catch (error) {\n        setIsCategoryLoading(false);\n        toast.error(error?.response?.data?.err);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        setIsProductsLoading(true);\n        const res = await apiCall(\n          \"GET\",\n          `product?page=${page}&limit=${productLimit}`\n        );\n\n        if (res?.data?.status === \"success\") {\n          setProducts(res?.data?.Data);\n          setTotalCount(res?.data?.totalCount);\n          setIsProductsLoading(false);\n        }\n      } catch (error) {\n        toast.error(error?.response?.data?.err);\n        setIsProductsLoading(false);\n      }\n    };\n    fetchProducts();\n  }, [page]);\n\n  useEffect(() => {\n    const fetchBannerProducts = async () => {\n      setIsBannerLoading(true);\n      try {\n        const res = await apiCall(\"GET\", `product/banner`);\n        if (res?.data?.status === \"success\") {\n          setBannerProducts(res?.data?.Data);\n          setIsBannerLoading(false);\n        }\n      } catch (error) {\n        toast.error(error?.response?.data?.err);\n        setIsBannerLoading(false);\n      }\n    };\n    fetchBannerProducts();\n  }, []);\n\n  return (\n    <>\n      <Head>\n        <title>Home Page</title>\n        <meta name=\"description\" content=\"Generated by create next app\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <Wrapper>\n        <Box\n          sx={{\n            marginTop: {\n              xs: \"0px\",\n              sm: \"0px\",\n              md: \"20px\",\n            },\n            marginBottom: {\n              xs: \"0px\",\n              sm: \"0px\",\n              md: \"10px\",\n            },\n            padding: {\n              xs: \"0px\",\n              sm: \"0px\",\n              md: \"0px 10px\",\n            },\n          }}\n        >\n          {isBannerLoading ? (\n            <CircularProgress\n              sx={{\n                color: \"#539165\",\n                marginLeft: \"50%\",\n                marginTop: \"2%\",\n              }}\n              size={30}\n            />\n          ) : (\n            <HeroBanner items={bannerProducts} />\n          )}\n          <Box sx={{ margin: \"0px auto\" }}>\n            <Box\n              sx={{\n                margin: \"20px 0px\",\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"space-between\",\n                flexDirection: {\n                  xs: \"column\",\n                  sm: \"column\",\n                  md: \"row\",\n                },\n              }}\n            >\n              <Typography\n                sx={{\n                  fontSize: \"25px\",\n                  textAlign: \"center\",\n                  textTransform: \"uppercase\",\n                }}\n              >\n                Explore some of our categories\n              </Typography>\n              <Button\n                onClick={() => router.push(\"/categories\")}\n                variant=\"outlined\"\n                sx={{\n                  width: {\n                    xs: \"90%\",\n                    sm: \"90%\",\n                    md: \"fit-content\",\n                  },\n                }}\n              >\n                View All\n              </Button>\n            </Box>\n\n            {isCategoryLoading ? (\n              <CircularProgress\n                sx={{\n                  color: \"#539165\",\n                  marginLeft: \"50%\",\n                  mt: 3,\n                  mb: 2,\n                }}\n                size={32}\n              />\n            ) : (\n              <Box\n                sx={{\n                  margin: \"15px auto 5% auto\",\n                  display: \"grid\",\n                  gridTemplateColumns: {\n                    xs: \"1fr 1fr\",\n                    sm: \"1fr 1fr\",\n                    md: \"1fr 1fr 1fr\",\n                    lg: \"1fr 1fr 1fr 1fr\",\n                    xl: \"1fr 1fr 1fr 1fr 1fr\",\n                  },\n                  placeItems: \"center\",\n                }}\n              >\n                {categories?.slice(0, 5)?.map((category) => (\n                  <HomeCategoryCard key={category?._id} category={category} />\n                ))}\n              </Box>\n            )}\n          </Box>\n\n          <Typography\n            sx={{\n              fontSize: \"25px\",\n              textAlign: \"center\",\n              textTransform: \"uppercase\",\n              margin: {\n                xs: \"10% 0px 10px 0px\",\n                sm: \"10% 0px 10px 0px\",\n                md: \"5% 0px 10px 0px\",\n              },\n            }}\n          >\n            Our Products\n          </Typography>\n          {isProductsLoading ? (\n            <CircularProgress\n              sx={{\n                color: \"#539165\",\n                marginLeft: \"50%\",\n                mt: 3,\n                mb: 2,\n              }}\n              size={32}\n            />\n          ) : (\n            <Box\n              sx={{\n                display: \"grid\",\n                gridTemplateColumns: {\n                  xs: \"1fr\",\n                  sm: \"1fr 1fr\",\n                  md: \"1fr 1fr 1fr\",\n                  lg: \"1fr 1fr 1fr 1fr\",\n                },\n                placeItems: \"center\",\n              }}\n            >\n              {products?.length === 0 ? (\n                <Typography>No Products Found!</Typography>\n              ) : (\n                products?.map((product) => (\n                  <ProductCard\n                    key={product?._id}\n                    product={product}\n                    handleClick={handleCardClick}\n                  />\n                ))\n              )}\n            </Box>\n          )}\n          {totalCount > 10 && (\n            <PaginationComponent\n              page={page}\n              setPage={setPage}\n              count={Math.ceil(totalCount / productLimit)}\n            />\n          )}\n        </Box>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Home;\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\login.js",["592"],[],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Head from \"next/head\";\r\nimport valid from \"@/utils/valid\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport { useRouter } from \"next/router\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function Register() {\r\n  const initialData = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n  const [userData, setUserData] = useState(initialData);\r\n  const { email, password } = userData;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const router = useRouter();\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    try {\r\n      const data = {\r\n        email: email,\r\n        password: CryptoJS.AES.encrypt(password, \"secret key 1\").toString(),\r\n      };\r\n\r\n      const res = await apiCall(\"POST\", \"auth/login\", \"\", data);\r\n      setIsLoading(false);\r\n      if (res?.data?.msg === \"Login Success!\") {\r\n        dispatch({\r\n          type: \"AUTH\",\r\n          payload: {\r\n            token: res?.data?.token,\r\n            user: res?.data?.user,\r\n          },\r\n        });\r\n        localStorage.setItem(\"token\", res?.data?.token);\r\n        toast.success(res?.data?.msg);\r\n        const cartId =\r\n          typeof window !== \"undefined\" && localStorage.getItem(\"cartId\");\r\n        if (cartId !== null) {\r\n          // const token =\r\n          // typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n\r\n          const cartData = await apiCall(\"GET\", `/cart/guest/${cartId}`);\r\n          if (cartData?.data?.status === \"success\") {\r\n            const formattedData = cartData?.data?.Data?.[0]?.products?.map(\r\n              (cart) => {\r\n                return {\r\n                  productId: cart?.productId?._id,\r\n                  quantity: cart?.quantity,\r\n                };\r\n              }\r\n            );\r\n            const postCartCall = await apiCall(\r\n              \"POST\",\r\n              `cart/${res?.data?.user?._id}`,\r\n              res?.data?.token,\r\n              formattedData\r\n            );\r\n          }\r\n        }\r\n        if (router?.query?.from) {\r\n          router.push(`${router?.query?.from}`);\r\n        } else {\r\n          router.push(\"/\");\r\n        }\r\n        localStorage.removeItem(\"cartId\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== \"undefined\" && localStorage.getItem(\"token\")) {\r\n      router.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Head>\r\n        <title>Login Page</title>\r\n      </Head>\r\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\r\n        <CssBaseline />\r\n        <Grid\r\n          item\r\n          xs={false}\r\n          sm={4}\r\n          md={7}\r\n          sx={{\r\n            backgroundImage: \"url(https://source.unsplash.com/random)\",\r\n            backgroundRepeat: \"no-repeat\",\r\n            backgroundColor: (t) =>\r\n              t.palette.mode === \"light\"\r\n                ? t.palette.grey[50]\r\n                : t.palette.grey[900],\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition: \"center\",\r\n          }}\r\n        />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <Box\r\n            sx={{\r\n              my: 8,\r\n              mx: 4,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Avatar sx={{ m: 1, bgcolor: \"#539165\" }}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Login\r\n            </Typography>\r\n            <Box\r\n              component=\"form\"\r\n              noValidate\r\n              onSubmit={handleSubmit}\r\n              sx={{ mt: 1 }}\r\n            >\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={userData.email}\r\n                onChange={handleChange}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={userData?.password}\r\n                onChange={handleChange}\r\n              />\r\n\r\n              {isLoading ? (\r\n                <CircularProgress\r\n                  sx={{\r\n                    color: \"#539165\",\r\n                    marginLeft: \"50%\",\r\n                    mt: 3,\r\n                    mb: 2,\r\n                  }}\r\n                  size={20}\r\n                />\r\n              ) : (\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    mt: 3,\r\n                    mb: 2,\r\n                    background: \"#539165\",\r\n                    \"&:hover\": { background: \"#539165\" },\r\n                  }}\r\n                >\r\n                  Login\r\n                </Button>\r\n              )}\r\n              <Grid container>\r\n                <Grid item xs>\r\n                  {/* <Link href=\"#\" variant=\"body2\" color={\"#539165\"}>\r\n                    Forgot password?\r\n                  </Link> */}\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link href={\"/register\"} variant=\"body2\" color={\"#539165\"}>\r\n                    {\"Don't have an account? Register\"}\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\order\\[id].js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\payment.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\product\\[id].js",["593","594"],[],"import { apiCall } from \"@/utils/apiCall\";\r\nimport { Box, Button, Grid, Typography } from \"@mui/material\";\r\nimport Head from \"next/head\";\r\nimport React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { DataContext } from \"../../../store/GlobalState\";\r\nimport { addToCart } from \"../../../store/Actions\";\r\nimport Wrapper from \"../../../components/Wrapper/Wrapper\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useRouter } from \"next/router\";\r\n\r\nfunction ProductDetails(props) {\r\n  const router = useRouter();\r\n  const [productDetailsData] = useState(props?.product);\r\n  const [tab, setTab] = useState(0);\r\n  const { state, dispatch } = React.useContext(DataContext);\r\n  const { auth } = state;\r\n  const handleAddToCart = async (e, product, userId, quantity = 1) => {\r\n    e.stopPropagation();\r\n    const token =\r\n      typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n\r\n    if (product?.inStock === 0) {\r\n      return toast.error(\"Item is out of stock.\");\r\n    }\r\n    if (token && state?.auth?.isVerified) {\r\n      const data = [\r\n        {\r\n          productId: product?._id,\r\n          quantity: quantity,\r\n        },\r\n      ];\r\n      if (product?.inStock < quantity) {\r\n        return toast.error(\"Item is out of stock.\");\r\n      }\r\n      const res = await apiCall(\"POST\", `cart/${auth?.user?.id}`, token, data);\r\n      if (res?.data?.status === \"success\") {\r\n        toast.success(\"success\");\r\n        // return dispatch(addToCart(res?.data?.Data?.products, state.cart));\r\n        const getCart = await apiCall(\"GET\", `cart/${auth?.user?.id}`, token);\r\n        const totalQuantity = getCart?.data?.Data?.cart?.[0]?.products?.reduce(\r\n          (acc, curr) => acc + curr?.quantity,\r\n          0\r\n        );\r\n        const totalAmount = getCart?.data?.Data?.totalAmount;\r\n        return dispatch(addToCart(\"\", \"\", totalQuantity, totalAmount));\r\n      }\r\n    } else {\r\n      const cartId =\r\n        typeof window !== \"undefined\" ? localStorage.getItem(\"cartId\") : \"\";\r\n      const data = {\r\n        cartId: cartId,\r\n        products: [\r\n          {\r\n            productId: product?._id,\r\n            quantity: quantity,\r\n          },\r\n        ],\r\n      };\r\n      const res = await apiCall(\"POST\", `cart`, \"\", data);\r\n\r\n      if (res?.data?.status === \"success\") {\r\n        toast.success(\"success\");\r\n        localStorage.setItem(\"cartId\", res?.data?.Data?._id);\r\n        if (cartId !== null) {\r\n          const getCart = await apiCall(\"GET\", `cart/guest/${cartId}`);\r\n\r\n          const totalQuantity = getCart?.data?.Data?.[0]?.products?.reduce(\r\n            (acc, curr) => acc + curr?.quantity,\r\n            0\r\n          );\r\n          return dispatch(addToCart(\"\", \"\", totalQuantity));\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Product Details Page</title>\r\n      </Head>\r\n      <Wrapper\r\n        style={{\r\n          maxWidth: \"1100px\",\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            padding: \"0px 10px\",\r\n            marginTop: \"20px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <Grid container>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={12}\r\n              md={7}\r\n              // sx={{\r\n              //   // maxHeight: \"500px\",\r\n              //   width: {\r\n              //     xs: \"300px\",\r\n              //     sm: \"300px\",\r\n              //     md: \"fit-content\",\r\n              //   },\r\n              // }}\r\n            >\r\n              <Box>\r\n                <img\r\n                  src={productDetailsData?.images?.[tab]?.url}\r\n                  alt={productDetailsData?.images?.[tab]?.url}\r\n                  style={{\r\n                    width: \"100%\",\r\n                    maxWidth: \"500px\",\r\n                    maxHeight: \"450px\",\r\n                    borderRadius: \"8px\",\r\n                  }}\r\n                />\r\n                <Box>\r\n                  {productDetailsData?.images?.map((image, index) => (\r\n                    <img\r\n                      src={image?.url}\r\n                      key={index}\r\n                      alt={image?.url}\r\n                      onClick={() => setTab(index)}\r\n                      style={{\r\n                        width: 80,\r\n                        height: 80,\r\n                        margin: \"5px\",\r\n                        objectFit: \"cover\",\r\n                        border: tab === index ? \"2px solid red\" : \"\",\r\n                        borderRadius: \"8px\",\r\n                      }}\r\n                    />\r\n                  ))}\r\n                </Box>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} md={5}>\r\n              <Typography\r\n                sx={{\r\n                  textTransform: \"uppercase\",\r\n                  width: \"100%\",\r\n                  fontSize: \"32px\",\r\n                }}\r\n              >\r\n                {productDetailsData?.title}\r\n              </Typography>\r\n              <Box\r\n                sx={{\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                  margin: \"10px 0px\",\r\n                }}\r\n              >\r\n                <Box sx={{ display: \"flex\" }}>\r\n                  {productDetailsData?.discountPrice && (\r\n                    <Typography variant=\"h6\" sx={{ color: \"red\" }}>\r\n                      Rs. {productDetailsData?.discountPrice}\r\n                    </Typography>\r\n                  )}\r\n                  <Typography\r\n                    variant=\"h6\"\r\n                    sx={{\r\n                      color: productDetailsData?.discountPrice ? \"#000\" : \"red\",\r\n                      marginLeft: \"15px\",\r\n                      textDecoration: productDetailsData?.discountPrice\r\n                        ? \"line-through\"\r\n                        : \"none\",\r\n                    }}\r\n                  >\r\n                    Rs. {productDetailsData?.price}\r\n                  </Typography>\r\n                </Box>\r\n\r\n                <Typography variant=\"h6\" sx={{ color: \"red\" }}>\r\n                  Sold: {productDetailsData?.sold}\r\n                </Typography>\r\n              </Box>\r\n              <Typography\r\n                variant=\"body1\"\r\n                sx={{ margin: \"10px 0px\", color: \"red\" }}\r\n              >\r\n                In Stock: {productDetailsData?.inStock}\r\n              </Typography>\r\n              <Typography variant=\"body1\" sx={{ width: \"100%\" }}>\r\n                {productDetailsData?.description}\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                sx={{\r\n                  width: {\r\n                    xs: \"100%\",\r\n                    sm: \"100%\",\r\n                    md: \"60%\",\r\n                  },\r\n                  mt: 3,\r\n                  mb: 2,\r\n                  background: \"#539165\",\r\n                  \"&:hover\": { background: \"#539165\" },\r\n                  borderRadius: \"30px\",\r\n                  height: \"50px\",\r\n                }}\r\n                onClick={(e) =>\r\n                  handleAddToCart(e, productDetailsData, state?.auth?.user?.id)\r\n                }\r\n                disabled={productDetailsData?.inStock === 0}\r\n              >\r\n                {productDetailsData?.inStock === 0\r\n                  ? \"Out of stock\"\r\n                  : \"Add to cart\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport async function getServerSideProps({ params: { id } }) {\r\n  const res = await apiCall(\"GET\", `product/${id}`);\r\n  return {\r\n    props: {\r\n      product: res?.data?.Data,\r\n    },\r\n  };\r\n}\r\n\r\nexport default ProductDetails;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\profile.js",["595","596","597","598","599","600","601","602","603","604","605","606","607","608","609"],[],"import Head from \"next/head\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport Wrapper from \"../../components/Wrapper/Wrapper\";\r\nimport { Box, Button, Grid, Typography } from \"@mui/material\";\r\nimport BoxShadowWrapper from \"../../components/BoxShadowWrapper\";\r\nimport CustomInputBox from \"../../components/CustomInputBox/CustomInputBox\";\r\nimport TableComponent from \"../../components/TableComponent/TableComponent\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport CryptoJS from \"crypto-js\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DataContext } from \"../../store/GlobalState\";\r\nimport PaginationComponent from \"../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction profile() {\r\n  const initialData = {\r\n    name: \"\",\r\n    email: \"\",\r\n    oldPassword: \"\",\r\n    newPassword: \"\",\r\n    confirmNewPassword: \"\",\r\n  };\r\n  const { state, dispatch } = useContext(DataContext);\r\n  const { auth } = state;\r\n  const [error, setError] = useState(null);\r\n  const router = useRouter();\r\n  const [orders, setOrders] = useState([]);\r\n  const [ordersTableData, setOrdersTableData] = useState([]);\r\n  const [profile, setProfile] = useState(initialData);\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== \"undefined\" && !localStorage.getItem(\"token\")) {\r\n      router.push(\"/login\");\r\n    }\r\n  }, []);\r\n\r\n  const tableHeadings = [\r\n    \"Order Id\",\r\n    \"User\",\r\n    \"Date\",\r\n    \"Total\",\r\n    \"Delivered\",\r\n    \"Paid\",\r\n    \"Action\",\r\n  ];\r\n  const token = typeof window !== \"undefined\" && localStorage.getItem(\"token\");\r\n\r\n  useEffect(() => {\r\n    const fetchOrders = async () => {\r\n      const res = await apiCall(\r\n        \"GET\",\r\n        `order?page=${page}&limit=${productLimit}`,\r\n        token\r\n      );\r\n      if (res?.data?.status === \"success\") {\r\n        if (res?.data?.status === \"success\") {\r\n          setTotalCount(res?.data?.Data?.totalCount);\r\n          const formattedData = res?.data?.Data?.orders?.map((order) => {\r\n            return {\r\n              firstCol: order?._id,\r\n              secondCol: order?.user?.name,\r\n\r\n              thirdCol: new Date(order?.createdAt).toLocaleDateString(),\r\n\r\n              fourthCol: `₹ ${order?.total}`,\r\n              fifthCol: order?.delivered?.toString(),\r\n\r\n              sixthCol: order?.payment_status?.toString(),\r\n              sevnthCol: (\r\n                <Button onClick={() => handleOrderNavigate(order?._id)}>\r\n                  Details\r\n                </Button>\r\n              ),\r\n            };\r\n          });\r\n          setOrdersTableData(formattedData);\r\n          setOrders(res?.data?.Data?.orders);\r\n        }\r\n      }\r\n    };\r\n    fetchOrders();\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    if (auth?.isVerified === true) {\r\n      setProfile({\r\n        ...profile,\r\n        email: auth?.user?.email,\r\n        name: auth?.user?.name,\r\n      });\r\n    }\r\n  }, [auth?.isVerified]);\r\n\r\n  const handleOrderNavigate = (orderId) => {\r\n    router.push(`/order/${orderId}`);\r\n  };\r\n\r\n  const validate = () => {\r\n    let errors = {};\r\n    let valid = true;\r\n    if (\r\n      !profile?.name ||\r\n      !profile?.email ||\r\n      !profile?.oldPassword ||\r\n      !profile?.newPassword ||\r\n      !profile?.confirmNewPassword\r\n    ) {\r\n      errors[\"all\"] = \"Please enter all required fields\";\r\n      valid = false;\r\n    }\r\n\r\n    if (profile?.newPassword?.length < 6) {\r\n      errors[\"newPassword\"] = \"Password should be atleast 6 characters long\";\r\n      valid = false;\r\n    }\r\n\r\n    if (profile?.newPassword !== profile?.confirmNewPassword) {\r\n      errors[\"confirmNewPassword\"] = \"Passwords does not match\";\r\n      valid = false;\r\n    }\r\n\r\n    setError(errors);\r\n    return valid;\r\n  };\r\n\r\n  const handleResetPassword = async () => {\r\n    try {\r\n      const isValid = validate();\r\n      if (isValid) {\r\n        const data = {\r\n          oldPassword: CryptoJS.AES.encrypt(\r\n            profile?.oldPassword,\r\n            \"secret key 1\"\r\n          ).toString(),\r\n          newPassword: CryptoJS.AES.encrypt(\r\n            profile?.newPassword,\r\n            \"secret key 1\"\r\n          ).toString(),\r\n          name: profile?.name,\r\n        };\r\n        const res = await apiCall(\"PATCH\", \"user/resetPassword\", token, data);\r\n        if (res?.data?.status === \"success\") {\r\n          toast.success(\"Password Updated Successfuly!\");\r\n          setProfile({\r\n            ...profile,\r\n            newPassword: \"\",\r\n            oldPassword: \"\",\r\n            confirmNewPassword: \"\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  const handleProfileInfo = async () => {\r\n    try {\r\n      const data = {\r\n        name: profile?.name,\r\n      };\r\n      const res = await apiCall(\"PATCH\", \"user\", token, data);\r\n      if (res?.data?.status === \"success\") {\r\n        toast.success(\"Profile Updated Successfuly!\");\r\n      }\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n    }\r\n  };\r\n\r\n  const handleProfileUpdate = async () => {\r\n    if (profile?.oldPassword || profile?.newPassword) {\r\n      const isValid = validate();\r\n      if (isValid) {\r\n        handleResetPassword();\r\n      }\r\n    }\r\n    if (profile?.name !== auth?.user?.name) {\r\n      handleProfileInfo();\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setProfile({ ...profile, [name]: value });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Profile</title>\r\n      </Head>\r\n      <Wrapper>\r\n        <Box\r\n          sx={{\r\n            padding: \"0px 10px\",\r\n            marginTop: \"20px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <Grid container columnSpacing={5}>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              sm={auth?.user?.role === \"user\" ? 4 : 12}\r\n              md={auth?.user?.role === \"user\" ? 4 : 12}\r\n            >\r\n              <BoxShadowWrapper\r\n                style={{\r\n                  maxWidth: auth?.user?.role === \"user\" ? \"100%\" : \"500px\",\r\n                }}\r\n              >\r\n                <Typography sx={{ fontSize: \"22px\" }}>User Profile</Typography>\r\n                <CustomInputBox\r\n                  id={\"name\"}\r\n                  label={\"Name\"}\r\n                  name={\"name\"}\r\n                  inputStyle={{\r\n                    width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                  }}\r\n                  value={profile?.name}\r\n                  onChange={handleChange}\r\n                  errorValue={error?.name}\r\n                />\r\n                <CustomInputBox\r\n                  id={\"email\"}\r\n                  label={\"Email\"}\r\n                  name={\"email\"}\r\n                  inputStyle={{\r\n                    width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                  }}\r\n                  value={profile?.email}\r\n                  onChange={handleChange}\r\n                  readOnly={true}\r\n                  errorValue={error?.email}\r\n                />\r\n                <CustomInputBox\r\n                  id={\"oldPassword\"}\r\n                  label={\"Old Password\"}\r\n                  name={\"oldPassword\"}\r\n                  inputStyle={{\r\n                    width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                  }}\r\n                  value={profile?.oldPassword}\r\n                  onChange={(e) => handleChange(e)}\r\n                  errorValue={error?.oldPassword}\r\n                  type={\"password\"}\r\n                />\r\n                <CustomInputBox\r\n                  id={\"newPassword\"}\r\n                  label={\"New Password\"}\r\n                  name={\"newPassword\"}\r\n                  inputStyle={{\r\n                    width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                  }}\r\n                  value={profile?.newPassword}\r\n                  onChange={(e) => handleChange(e)}\r\n                  errorValue={error?.newPassword}\r\n                  type={\"password\"}\r\n                />\r\n                <CustomInputBox\r\n                  id={\"confirmNewPassword\"}\r\n                  label={\"Confirm New Password\"}\r\n                  name={\"confirmNewPassword\"}\r\n                  inputStyle={{\r\n                    width: { xs: \"100%\", sm: \"100%\", md: \"100%\" },\r\n                  }}\r\n                  value={profile?.confirmNewPassword}\r\n                  onChange={(e) => handleChange(e)}\r\n                  errorValue={error?.confirmNewPassword}\r\n                  type={\"password\"}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    mt: 3,\r\n                    mb: 2,\r\n                    background: \"#539165\",\r\n                    \"&:hover\": { background: \"#539165\" },\r\n                    borderRadius: \"30px\",\r\n                    height: \"50px\",\r\n                  }}\r\n                  onClick={handleProfileUpdate}\r\n                  disabled={\r\n                    !profile?.email ||\r\n                    // !profile?.oldPassword ||\r\n                    // !profile?.newPassword ||\r\n                    // !profile?.confirmNewPassword ||\r\n                    !profile?.name\r\n                  }\r\n                >\r\n                  Update\r\n                </Button>\r\n              </BoxShadowWrapper>\r\n            </Grid>\r\n            {auth?.user?.role === \"user\" && (\r\n              <Grid item xs={12} sm={8} md={8}>\r\n                <BoxShadowWrapper>\r\n                  {orders?.length > 0 ? (\r\n                    <TableComponent\r\n                      title={\"Orders\"}\r\n                      tableHeadings={tableHeadings}\r\n                      tableHeadingsStyle={{ fontSize: \"18px\" }}\r\n                      imageContainerStyle={{\r\n                        width: \"80px\",\r\n                        height: \"80px\",\r\n                        objectFit: \"cover\",\r\n                      }}\r\n                      imageStyle={{ height: \"100%\", width: \"100%\", flex: 1 }}\r\n                      tableBodyStyle={{ fontSize: \"18px\" }}\r\n                      tableBodyData={ordersTableData}\r\n                      isProfile={true}\r\n                      isImage={false}\r\n                      handleTableCellClick={handleOrderNavigate}\r\n                      align={\"center\"}\r\n                    />\r\n                  ) : (\r\n                    <Typography sx={{ fontSize: \"20px\" }}>\r\n                      No Orders Found\r\n                    </Typography>\r\n                  )}\r\n                  {totalCount > 10 && (\r\n                    <PaginationComponent\r\n                      page={page}\r\n                      setPage={setPage}\r\n                      count={Math.ceil(totalCount / productLimit)}\r\n                    />\r\n                  )}\r\n                </BoxShadowWrapper>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default profile;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\register.js",["610"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport Head from \"next/head\";\r\nimport valid from \"@/utils/valid\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CircularProgress } from \"@mui/material\";\r\nimport { useRouter } from \"next/router\";\r\nimport CryptoJS from \"crypto-js\";\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function Register() {\r\n  const initialData = {\r\n    email: \"\",\r\n    name: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n  };\r\n  const [userData, setUserData] = useState(initialData);\r\n  const { name, email, password, confirmPassword } = userData;\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const router = useRouter();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setUserData({ ...userData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    const errorMessage = valid(name, email, password, confirmPassword);\r\n\r\n    if (errorMessage) return toast.error(errorMessage);\r\n    try {\r\n      const data = {\r\n        email: email,\r\n        name: name,\r\n        password: CryptoJS.AES.encrypt(password, \"secret key 1\").toString(),\r\n        confirmPassword: CryptoJS.AES.encrypt(\r\n          confirmPassword,\r\n          \"secret key 1\"\r\n        ).toString(),\r\n      };\r\n      const res = await apiCall(\"POST\", \"auth/register\", \"\", data);\r\n      setIsLoading(false);\r\n      toast.success(res?.data?.msg);\r\n      router.push(\"/login\");\r\n    } catch (error) {\r\n      toast.error(error?.response?.data?.err);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== \"undefined\" && localStorage.getItem(\"token\")) {\r\n      router.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Head>\r\n        <title>Register Page</title>\r\n      </Head>\r\n      <Grid container component=\"main\" sx={{ height: \"100vh\" }}>\r\n        <CssBaseline />\r\n        <Grid\r\n          item\r\n          xs={false}\r\n          sm={4}\r\n          md={7}\r\n          sx={{\r\n            backgroundImage: \"url(https://source.unsplash.com/random)\",\r\n            backgroundRepeat: \"no-repeat\",\r\n            backgroundColor: (t) =>\r\n              t.palette.mode === \"light\"\r\n                ? t.palette.grey[50]\r\n                : t.palette.grey[900],\r\n            backgroundSize: \"cover\",\r\n            backgroundPosition: \"center\",\r\n          }}\r\n        />\r\n        <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n          <Box\r\n            sx={{\r\n              my: 8,\r\n              mx: 4,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Avatar sx={{ m: 1, bgcolor: \"#539165\" }}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in\r\n            </Typography>\r\n            <Box\r\n              component=\"form\"\r\n              noValidate\r\n              onSubmit={handleSubmit}\r\n              sx={{ mt: 1 }}\r\n            >\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"name\"\r\n                label=\"Name\"\r\n                name=\"name\"\r\n                autoComplete=\"name\"\r\n                autoFocus\r\n                value={userData.name}\r\n                onChange={handleChange}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                value={userData.email}\r\n                onChange={handleChange}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={userData?.password}\r\n                onChange={handleChange}\r\n              />\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"confirmPassword\"\r\n                label=\"Confirm Password\"\r\n                type=\"password\"\r\n                id=\"confirmPassword\"\r\n                autoComplete=\"confirm-password\"\r\n                value={userData.confirmPassword}\r\n                onChange={handleChange}\r\n              />\r\n\r\n              {isLoading ? (\r\n                <CircularProgress\r\n                  sx={{\r\n                    color: \"#539165\",\r\n                    marginLeft: \"50%\",\r\n                    mt: 3,\r\n                    mb: 2,\r\n                  }}\r\n                  size={20}\r\n                />\r\n              ) : (\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  sx={{\r\n                    mt: 3,\r\n                    mb: 2,\r\n                    background: \"#539165\",\r\n                    \"&:hover\": { background: \"#539165\" },\r\n                  }}\r\n                >\r\n                  Register\r\n                </Button>\r\n              )}\r\n              <Grid container>\r\n                <Grid item xs>\r\n                  {/* <Link href=\"#\" variant=\"body2\" color={\"#539165\"}>\r\n                    Forgot password?\r\n                  </Link> */}\r\n                </Grid>\r\n                <Grid item>\r\n                  <Link href={\"/login\"} variant=\"body2\" color={\"#539165\"}>\r\n                    {\"Don't have an account? Sign Up\"}\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\search\\[id].js",["611"],[],"import Head from \"next/head\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Wrapper from \"../../../components/Wrapper/Wrapper\";\r\nimport SearchProductList from \"../../../components/SearchProductList/SearchProductList\";\r\nimport { Box } from \"@mui/material\";\r\nimport { useRouter } from \"next/router\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiCall } from \"@/utils/apiCall\";\r\nimport PaginationComponent from \"../../../components/PaginationComponent/PaginationComponent\";\r\n\r\nfunction SearchPage() {\r\n  const [page, setPage] = useState(1);\r\n  const [productLimit, setProductLimit] = useState(10);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const router = useRouter();\r\n  const [products, setProducts] = useState([]);\r\n  const { id, name } = router.query;\r\n\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        if (id) {\r\n          const res = await apiCall(\r\n            \"GET\",\r\n            `search/${id}?page=${page}&limit=${productLimit}`\r\n          );\r\n          if (res?.data?.status === \"success\") {\r\n            setProducts(res?.data?.Data?.[0]?.products);\r\n            setTotalCount(res?.data?.Data?.[0]?.totalCount?.count);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        toast.error(error?.response?.data?.message);\r\n      }\r\n    };\r\n    fetchProducts();\r\n  }, [id, page]);\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <title>Search Results</title>\r\n      </Head>\r\n      <Wrapper>\r\n        <Box\r\n          sx={{\r\n            padding: \"0px 10px\",\r\n            marginTop: \"20px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          <SearchProductList\r\n            type=\"search query\"\r\n            products={products}\r\n            name={name}\r\n          />\r\n          {totalCount > 10 && (\r\n            <PaginationComponent\r\n              page={page}\r\n              setPage={setPage}\r\n              count={Math.ceil(totalCount / productLimit)}\r\n            />\r\n          )}\r\n        </Box>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SearchPage;\r\n","E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\success.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\_app.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\pages\\_document.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\apiCall.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\connectDB.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\get-stripejs.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\imageUpload.js",[],[],"E:\\Projects\\Next JS\\e-commerce app\\ecommerce\\src\\utils\\valid.js",[],[],{"ruleId":"612","severity":1,"message":"613","line":197,"column":11,"nodeType":"614","endLine":201,"endColumn":13},{"ruleId":"612","severity":1,"message":"613","line":466,"column":21,"nodeType":"614","endLine":475,"endColumn":23},{"ruleId":"612","severity":1,"message":"613","line":503,"column":19,"nodeType":"614","endLine":511,"endColumn":21},{"ruleId":"615","severity":2,"message":"616","line":18,"column":30,"nodeType":"617","messageId":"618","endLine":27,"endColumn":5},{"ruleId":"619","severity":1,"message":"620","line":50,"column":6,"nodeType":"621","endLine":50,"endColumn":24,"suggestions":"622"},{"ruleId":"619","severity":1,"message":"623","line":122,"column":6,"nodeType":"621","endLine":122,"endColumn":43,"suggestions":"624"},{"ruleId":"625","severity":2,"message":"626","line":35,"column":34,"nodeType":"627","messageId":"628"},{"ruleId":"625","severity":2,"message":"626","line":35,"column":39,"nodeType":"627","messageId":"628"},{"ruleId":"612","severity":1,"message":"613","line":90,"column":13,"nodeType":"614","endLine":94,"endColumn":15},{"ruleId":"612","severity":1,"message":"613","line":35,"column":7,"nodeType":"614","endLine":39,"endColumn":9},{"ruleId":"619","severity":1,"message":"629","line":109,"column":6,"nodeType":"621","endLine":109,"endColumn":8,"suggestions":"630"},{"ruleId":"612","severity":1,"message":"613","line":113,"column":21,"nodeType":"614","endLine":117,"endColumn":23},{"ruleId":"619","severity":1,"message":"631","line":51,"column":6,"nodeType":"621","endLine":51,"endColumn":33,"suggestions":"632"},{"ruleId":"612","severity":1,"message":"613","line":201,"column":21,"nodeType":"614","endLine":215,"endColumn":23},{"ruleId":"619","severity":1,"message":"633","line":63,"column":6,"nodeType":"621","endLine":63,"endColumn":31,"suggestions":"634"},{"ruleId":"612","severity":1,"message":"613","line":47,"column":13,"nodeType":"614","endLine":56,"endColumn":15},{"ruleId":"619","severity":1,"message":"623","line":93,"column":6,"nodeType":"621","endLine":93,"endColumn":8,"suggestions":"635"},{"ruleId":"619","severity":1,"message":"623","line":136,"column":6,"nodeType":"621","endLine":136,"endColumn":8,"suggestions":"636"},{"ruleId":"619","severity":1,"message":"637","line":65,"column":6,"nodeType":"621","endLine":65,"endColumn":12,"suggestions":"638"},{"ruleId":"619","severity":1,"message":"639","line":100,"column":6,"nodeType":"621","endLine":100,"endColumn":32,"suggestions":"640"},{"ruleId":"619","severity":1,"message":"633","line":108,"column":6,"nodeType":"621","endLine":108,"endColumn":37,"suggestions":"641"},{"ruleId":"619","severity":1,"message":"642","line":163,"column":6,"nodeType":"621","endLine":163,"endColumn":8,"suggestions":"643"},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":25,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":9,"column":1,"nodeType":"646","endLine":15,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":9,"column":1,"nodeType":"646","endLine":15,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":19,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":25,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":15,"column":1,"nodeType":"646","endLine":24,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":15,"column":1,"nodeType":"646","endLine":30,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":22,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":19,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":22,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":8,"column":1,"nodeType":"646","endLine":14,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":7,"column":1,"nodeType":"646","endLine":15,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":8,"column":1,"nodeType":"646","endLine":14,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":25,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":11,"column":1,"nodeType":"646","endLine":16,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":19,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":14,"column":1,"nodeType":"646","endLine":23,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":19,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":7,"column":1,"nodeType":"646","endLine":13,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":9,"column":1,"nodeType":"646","endLine":48,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":6,"column":1,"nodeType":"646","endLine":12,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":7,"column":1,"nodeType":"646","endLine":16,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":8,"column":1,"nodeType":"646","endLine":20,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":10,"column":1,"nodeType":"646","endLine":15,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":13,"column":1,"nodeType":"646","endLine":19,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":7,"column":1,"nodeType":"646","endLine":16,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":9,"column":1,"nodeType":"646","endLine":15,"endColumn":3},{"ruleId":"644","severity":1,"message":"645","line":7,"column":1,"nodeType":"646","endLine":15,"endColumn":3},{"ruleId":"619","severity":1,"message":"647","line":58,"column":6,"nodeType":"621","endLine":58,"endColumn":64,"suggestions":"648"},{"ruleId":"619","severity":1,"message":"649","line":75,"column":6,"nodeType":"621","endLine":75,"endColumn":24,"suggestions":"650"},{"ruleId":"619","severity":1,"message":"631","line":36,"column":6,"nodeType":"621","endLine":36,"endColumn":12,"suggestions":"651"},{"ruleId":"619","severity":1,"message":"631","line":41,"column":6,"nodeType":"621","endLine":41,"endColumn":16,"suggestions":"652"},{"ruleId":"619","severity":1,"message":"623","line":100,"column":6,"nodeType":"621","endLine":100,"endColumn":8,"suggestions":"653"},{"ruleId":"619","severity":1,"message":"654","line":183,"column":6,"nodeType":"621","endLine":183,"endColumn":24,"suggestions":"655"},{"ruleId":"619","severity":1,"message":"631","line":68,"column":6,"nodeType":"621","endLine":68,"endColumn":12,"suggestions":"656"},{"ruleId":"619","severity":1,"message":"657","line":101,"column":6,"nodeType":"621","endLine":101,"endColumn":8,"suggestions":"658"},{"ruleId":"612","severity":1,"message":"613","line":111,"column":17,"nodeType":"614","endLine":120,"endColumn":19},{"ruleId":"612","severity":1,"message":"613","line":123,"column":21,"nodeType":"614","endLine":136,"endColumn":23},{"ruleId":"659","severity":2,"message":"660","line":23,"column":31,"nodeType":"661","endLine":23,"endColumn":41},{"ruleId":"659","severity":2,"message":"662","line":25,"column":29,"nodeType":"661","endLine":25,"endColumn":37},{"ruleId":"659","severity":2,"message":"663","line":26,"column":18,"nodeType":"661","endLine":26,"endColumn":27},{"ruleId":"659","severity":2,"message":"662","line":27,"column":31,"nodeType":"661","endLine":27,"endColumn":39},{"ruleId":"659","severity":2,"message":"662","line":28,"column":49,"nodeType":"661","endLine":28,"endColumn":57},{"ruleId":"659","severity":2,"message":"662","line":29,"column":33,"nodeType":"661","endLine":29,"endColumn":41},{"ruleId":"659","severity":2,"message":"662","line":30,"column":27,"nodeType":"661","endLine":30,"endColumn":35},{"ruleId":"659","severity":2,"message":"662","line":31,"column":43,"nodeType":"661","endLine":31,"endColumn":51},{"ruleId":"659","severity":2,"message":"662","line":32,"column":39,"nodeType":"661","endLine":32,"endColumn":47},{"ruleId":"659","severity":2,"message":"664","line":34,"column":3,"nodeType":"661","endLine":34,"endColumn":12},{"ruleId":"619","severity":1,"message":"657","line":38,"column":6,"nodeType":"621","endLine":38,"endColumn":8,"suggestions":"665"},{"ruleId":"659","severity":2,"message":"664","line":51,"column":3,"nodeType":"661","endLine":51,"endColumn":12},{"ruleId":"619","severity":1,"message":"666","line":85,"column":6,"nodeType":"621","endLine":85,"endColumn":12,"suggestions":"667"},{"ruleId":"659","severity":2,"message":"664","line":87,"column":3,"nodeType":"661","endLine":87,"endColumn":12},{"ruleId":"619","severity":1,"message":"668","line":95,"column":6,"nodeType":"621","endLine":95,"endColumn":24,"suggestions":"669"},{"ruleId":"619","severity":1,"message":"657","line":70,"column":6,"nodeType":"621","endLine":70,"endColumn":8,"suggestions":"670"},{"ruleId":"619","severity":1,"message":"631","line":37,"column":6,"nodeType":"621","endLine":37,"endColumn":16,"suggestions":"671"},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","react/display-name","Component definition is missing display name","CallExpression","noDisplayName","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth?.user?.id', 'dispatch', and 'token'. Either include them or remove the dependency array.","ArrayExpression",["672"],"React Hook useEffect has a missing dependency: 'token'. Either include it or remove the dependency array.",["673"],"react/no-unescaped-entities","`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","JSXText","unescapedEntityAlts","React Hook useEffect has a missing dependency: 'auth?.user'. Either include it or remove the dependency array.",["674"],"React Hook useEffect has a missing dependency: 'productLimit'. Either include it or remove the dependency array.",["675"],"React Hook useEffect has missing dependencies: 'productLimit' and 'token'. Either include them or remove the dependency array.",["676"],["677"],["678"],"React Hook useEffect has missing dependencies: 'handleTableCellClick', 'productLimit', and 'token'. Either include them or remove the dependency array.",["679"],"React Hook useEffect has missing dependencies: 'productLimit' and 'router'. Either include them or remove the dependency array.",["680"],["681"],"React Hook useEffect has missing dependencies: 'auth?.user?.role' and 'router'. Either include them or remove the dependency array.",["682"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: 'auth?.user?.id', 'dispatch', 'token', and 'total'. Either include them or remove the dependency array.",["683"],"React Hook useEffect has missing dependencies: 'cartId', 'dispatch', and 'token'. Either include them or remove the dependency array.",["684"],["685"],["686"],["687"],"React Hook useEffect has missing dependencies: 'auth?.user?.id' and 'token'. Either include them or remove the dependency array.",["688"],["689"],"React Hook useEffect has a missing dependency: 'router'. Either include it or remove the dependency array.",["690"],"react-hooks/rules-of-hooks","React Hook \"useContext\" is called in function \"profile\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","Identifier","React Hook \"useState\" is called in function \"profile\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","React Hook \"useRouter\" is called in function \"profile\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".","React Hook \"useEffect\" is called in function \"profile\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",["691"],"React Hook useEffect has missing dependencies: 'handleOrderNavigate', 'productLimit', and 'token'. Either include them or remove the dependency array.",["692"],"React Hook useEffect has missing dependencies: 'auth?.user?.email', 'auth?.user?.name', and 'profile'. Either include them or remove the dependency array. You can also do a functional update 'setProfile(p => ...)' if you only need 'profile' in the 'setProfile' call.",["693"],["694"],["695"],{"desc":"696","fix":"697"},{"desc":"698","fix":"699"},{"desc":"700","fix":"701"},{"desc":"702","fix":"703"},{"desc":"704","fix":"705"},{"desc":"706","fix":"707"},{"desc":"706","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"717","fix":"718"},{"desc":"719","fix":"720"},{"desc":"721","fix":"722"},{"desc":"723","fix":"724"},{"desc":"706","fix":"725"},{"desc":"726","fix":"727"},{"desc":"721","fix":"728"},{"desc":"729","fix":"730"},{"desc":"729","fix":"731"},{"desc":"732","fix":"733"},{"desc":"734","fix":"735"},{"desc":"729","fix":"736"},{"desc":"723","fix":"737"},"Update the dependencies array to be: [auth?.isVerified, auth?.user?.id, dispatch, token]",{"range":"738","text":"739"},"Update the dependencies array to be: [router?.query, deliveryCallTriggered, token]",{"range":"740","text":"741"},"Update the dependencies array to be: [auth?.user]",{"range":"742","text":"743"},"Update the dependencies array to be: [triggerCategoryCall, page, productLimit]",{"range":"744","text":"745"},"Update the dependencies array to be: [triggerCouponCall, page, productLimit, token]",{"range":"746","text":"747"},"Update the dependencies array to be: [token]",{"range":"748","text":"749"},{"range":"750","text":"749"},"Update the dependencies array to be: [handleTableCellClick, page, productLimit, token]",{"range":"751","text":"752"},"Update the dependencies array to be: [productCallTrigger, page, productLimit, router]",{"range":"753","text":"754"},"Update the dependencies array to be: [roleUpdateCallTriggered, page, productLimit, token]",{"range":"755","text":"756"},"Update the dependencies array to be: [auth?.user?.role, router]",{"range":"757","text":"758"},"Update the dependencies array to be: [auth?.isVerified, triggerLoginCart, couponCode.readOnly, token, auth?.user?.id, dispatch, total]",{"range":"759","text":"760"},"Update the dependencies array to be: [cartId, dispatch, token, triggerGuestCart]",{"range":"761","text":"762"},"Update the dependencies array to be: [page, productLimit]",{"range":"763","text":"764"},"Update the dependencies array to be: [id, page, productLimit]",{"range":"765","text":"766"},{"range":"767","text":"749"},"Update the dependencies array to be: [auth?.isVerified, auth?.user?.id, token]",{"range":"768","text":"769"},{"range":"770","text":"764"},"Update the dependencies array to be: [router]",{"range":"771","text":"772"},{"range":"773","text":"772"},"Update the dependencies array to be: [handleOrderNavigate, page, productLimit, token]",{"range":"774","text":"775"},"Update the dependencies array to be: [auth?.isVerified, auth?.user?.email, auth?.user?.name, profile]",{"range":"776","text":"777"},{"range":"778","text":"772"},{"range":"779","text":"766"},[1903,1921],"[auth?.isVerified, auth?.user?.id, dispatch, token]",[4254,4291],"[router?.query, deliveryCallTriggered, token]",[3228,3230],"[auth?.user]",[2312,2339],"[triggerCategoryCall, page, productLimit]",[2595,2620],"[triggerCouponCall, page, productLimit, token]",[3207,3209],"[token]",[4374,4376],[2512,2518],"[handleTableCellClick, page, productLimit, token]",[3810,3836],"[productCallTrigger, page, productLimit, router]",[3848,3879],"[roleUpdateCallTriggered, page, productLimit, token]",[5286,5288],"[auth?.user?.role, router]",[2671,2729],"[auth?.isVerified, triggerLoginCart, couponCode.readOnly, token, auth?.user?.id, dispatch, total]",[3281,3299],"[cartId, dispatch, token, triggerGuestCart]",[1344,1350],"[page, productLimit]",[1524,1534],"[id, page, productLimit]",[2966,2968],[5437,5455],"[auth?.isVerified, auth?.user?.id, token]",[2422,2428],[3415,3417],"[router]",[1523,1525],[2859,2865],"[handleOrderNavigate, page, productLimit, token]",[3062,3080],"[auth?.isVerified, auth?.user?.email, auth?.user?.name, profile]",[2320,2322],[1344,1354]]