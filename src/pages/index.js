import Head from "next/head";
import { useEffect } from "react";

import { apiCall } from "@/utils/apiCall";
import { useState } from "react";
import { Box, Button, CircularProgress, Typography } from "@mui/material";
import { useRouter } from "next/router";
import { toast } from "react-toastify";
import Wrapper from "@/components/Wrapper/Wrapper";
import HeroBanner from "@/components/HeroBanner/HeroBanner";
import HomeCategoryCard from "@/components/HomeCategoryCard/HomeCategoryCard";
import ProductCard from "@/components/ProductCard/ProductsCard";
import PaginationComponent from "@/components/PaginationComponent/PaginationComponent";

const Home = (props) => {
  const [bannerProducts, setBannerProducts] = useState([]);
  const [products, setProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const router = useRouter();
  const [isProductsLoading, setIsProductsLoading] = useState(false);
  const [isCategoryLoading, setIsCategoryLoading] = useState(false);
  const [isBannerLoading, setIsBannerLoading] = useState(false);
  const [page, setPage] = useState(1);
  const [productLimit, setProductLimit] = useState(10);
  const [totalCount, setTotalCount] = useState(0);

  const handleCardClick = (product) => {
    router.push(`/product/${product?._id}`);
  };

  useEffect(() => {
    const fetchCategories = async () => {
      setIsCategoryLoading(true);
      try {
        const res = await apiCall("GET", "category");
        if (res?.data?.status === "success") {
          setIsCategoryLoading(false);
          setCategories(res?.data?.Data?.categories);
        }
      } catch (error) {
        setIsCategoryLoading(false);
        toast.error(error?.response?.data?.err);
      }
    };
    fetchCategories();
  }, []);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setIsProductsLoading(true);
        const res = await apiCall(
          "GET",
          `product?page=${page}&limit=${productLimit}`
        );

        if (res?.data?.status === "success") {
          setProducts(res?.data?.Data);
          setTotalCount(res?.data?.totalCount);
          setIsProductsLoading(false);
        }
      } catch (error) {
        toast.error(error?.response?.data?.err);
        setIsProductsLoading(false);
      }
    };
    fetchProducts();
  }, [page]);

  useEffect(() => {
    const fetchBannerProducts = async () => {
      setIsBannerLoading(true);
      try {
        const res = await apiCall("GET", `product/banner`);
        if (res?.data?.status === "success") {
          setBannerProducts(res?.data?.Data);
          setIsBannerLoading(false);
        }
      } catch (error) {
        toast.error(error?.response?.data?.err);
        setIsBannerLoading(false);
      }
    };
    fetchBannerProducts();
  }, []);

  return (
    <>
      <Head>
        <title>Home Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Wrapper>
        <Box
          sx={{
            marginTop: {
              xs: "0px",
              sm: "0px",
              md: "20px",
            },
            marginBottom: {
              xs: "0px",
              sm: "0px",
              md: "10px",
            },
            padding: {
              xs: "0px",
              sm: "0px",
              md: "0px 10px",
            },
          }}
        >
          {isBannerLoading ? (
            <CircularProgress
              sx={{
                color: "#539165",
                marginLeft: "50%",
                marginTop: "2%",
              }}
              size={30}
            />
          ) : (
            <HeroBanner items={bannerProducts} />
          )}
          <Box sx={{ margin: "0px auto" }}>
            <Box
              sx={{
                margin: "20px 0px",
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                flexDirection: {
                  xs: "column",
                  sm: "column",
                  md: "row",
                },
              }}
            >
              <Typography
                sx={{
                  fontSize: "25px",
                  textAlign: "center",
                  textTransform: "uppercase",
                }}
              >
                Explore some of our categories
              </Typography>
              <Button
                onClick={() => router.push("/categories")}
                variant="outlined"
                sx={{
                  width: {
                    xs: "90%",
                    sm: "90%",
                    md: "fit-content",
                  },
                }}
              >
                View All
              </Button>
            </Box>

            {isCategoryLoading ? (
              <CircularProgress
                sx={{
                  color: "#539165",
                  marginLeft: "50%",
                  mt: 3,
                  mb: 2,
                }}
                size={32}
              />
            ) : (
              <Box
                sx={{
                  margin: "15px auto 5% auto",
                  display: "grid",
                  gridTemplateColumns: {
                    xs: "1fr 1fr",
                    sm: "1fr 1fr",
                    md: "1fr 1fr 1fr",
                    lg: "1fr 1fr 1fr 1fr",
                    xl: "1fr 1fr 1fr 1fr 1fr",
                  },
                  placeItems: "center",
                }}
              >
                {categories?.slice(0, 5)?.map((category) => (
                  <HomeCategoryCard key={category?._id} category={category} />
                ))}
              </Box>
            )}
          </Box>

          <Typography
            sx={{
              fontSize: "25px",
              textAlign: "center",
              textTransform: "uppercase",
              margin: {
                xs: "10% 0px 10px 0px",
                sm: "10% 0px 10px 0px",
                md: "5% 0px 10px 0px",
              },
            }}
          >
            Our Products
          </Typography>
          {isProductsLoading ? (
            <CircularProgress
              sx={{
                color: "#539165",
                marginLeft: "50%",
                mt: 3,
                mb: 2,
              }}
              size={32}
            />
          ) : (
            <Box
              sx={{
                display: "grid",
                gridTemplateColumns: {
                  xs: "1fr",
                  sm: "1fr 1fr",
                  md: "1fr 1fr 1fr",
                  lg: "1fr 1fr 1fr 1fr",
                },
                placeItems: "center",
              }}
            >
              {products?.length === 0 ? (
                <Typography>No Products Found!</Typography>
              ) : (
                products?.map((product) => (
                  <ProductCard
                    key={product?._id}
                    product={product}
                    handleClick={handleCardClick}
                  />
                ))
              )}
            </Box>
          )}
          {totalCount > 10 && (
            <PaginationComponent
              page={page}
              setPage={setPage}
              count={Math.ceil(totalCount / productLimit)}
            />
          )}
        </Box>
      </Wrapper>
    </>
  );
};

export default Home;
